
AutonomousDrivingSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  000015fc  00001690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008000a8  008000a8  000016d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e0b  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010d5  00000000  00000000  0000477f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011cf  00000000  00000000  00005854  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  00006a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fbd  00000000  00000000  00006e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e41  00000000  00000000  00007e11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00008c52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_1>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 39 03 	jmp	0x672	; 0x672 <__vector_13>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <Ext_Interrupt_ModeSet+0x28>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	ec ef       	ldi	r30, 0xFC	; 252
      ea:	f5 e1       	ldi	r31, 0x15	; 21
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a8 3a       	cpi	r26, 0xA8	; 168
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	a8 ea       	ldi	r26, 0xA8	; 168
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	ad 3b       	cpi	r26, 0xBD	; 189
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 62 02 	call	0x4c4	; 0x4c4 <main>
     10c:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <IRDISTANECE_Init>:

#include "IR_Distance_Sensor.h"
#include <math.h>
void IRDISTANECE_Init(void)
{
	Adc_Init(&gStrAdc_Configuration);
     114:	8d e9       	ldi	r24, 0x9D	; 157
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 89 03 	call	0x712	; 0x712 <Adc_Init>
     11c:	08 95       	ret

0000011e <IRDISTANCE_ValueGet>:
}


uint8 IRDISTANCE_ValueGet(void)
{
     11e:	cf 92       	push	r12
     120:	df 92       	push	r13
     122:	ef 92       	push	r14
     124:	ff 92       	push	r15
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	00 d0       	rcall	.+0      	; 0x130 <IRDISTANCE_ValueGet+0x12>
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
		Adc_ValueType u16LocalAdcReading = 0U;
     134:	1a 82       	std	Y+2, r1	; 0x02
     136:	19 82       	std	Y+1, r1	; 0x01
		uint8 u8LocalTemp = 0U;
		uint16 u16LocalAdcPrecision = 0U;
	Adc_StartGroupConversion(ADC_GROUP_0);
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	0e 94 c1 03 	call	0x782	; 0x782 <Adc_StartGroupConversion>
	Adc_ReadChannel(TEMP_SENSOR_PIN, gStrAdc_Configuration.Resolution, &u16LocalAdcReading);
     13e:	10 91 a1 00 	lds	r17, 0x00A1	; 0x8000a1 <gStrAdc_Configuration+0x4>
     142:	ae 01       	movw	r20, r28
     144:	4f 5f       	subi	r20, 0xFF	; 255
     146:	5f 4f       	sbci	r21, 0xFF	; 255
     148:	61 2f       	mov	r22, r17
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	0e 94 c7 03 	call	0x78e	; 0x78e <Adc_ReadChannel>
	switch(gStrAdc_Configuration.Resolution)
     150:	11 23       	and	r17, r17
     152:	29 f0       	breq	.+10     	; 0x15e <IRDISTANCE_ValueGet+0x40>
     154:	11 30       	cpi	r17, 0x01	; 1
     156:	31 f0       	breq	.+12     	; 0x164 <IRDISTANCE_ValueGet+0x46>

uint8 IRDISTANCE_ValueGet(void)
{
		Adc_ValueType u16LocalAdcReading = 0U;
		uint8 u8LocalTemp = 0U;
		uint16 u16LocalAdcPrecision = 0U;
     158:	00 e0       	ldi	r16, 0x00	; 0
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	05 c0       	rjmp	.+10     	; 0x168 <IRDISTANCE_ValueGet+0x4a>
	{
		case ADC_TEN_BIT:
		u16LocalAdcPrecision = ADC_TEN_BIT_PRECISION;
		break;
		case ADC_EIGHT_BIT:
		u16LocalAdcPrecision = ADC_EIGHT_BIT_PRECISION;
     15e:	00 e0       	ldi	r16, 0x00	; 0
     160:	11 e0       	ldi	r17, 0x01	; 1
		break;
     162:	02 c0       	rjmp	.+4      	; 0x168 <IRDISTANCE_ValueGet+0x4a>
	Adc_StartGroupConversion(ADC_GROUP_0);
	Adc_ReadChannel(TEMP_SENSOR_PIN, gStrAdc_Configuration.Resolution, &u16LocalAdcReading);
	switch(gStrAdc_Configuration.Resolution)
	{
		case ADC_TEN_BIT:
		u16LocalAdcPrecision = ADC_TEN_BIT_PRECISION;
     164:	00 e0       	ldi	r16, 0x00	; 0
     166:	14 e0       	ldi	r17, 0x04	; 4
		break;
		default:
		break;
	}
	/* !Comment: IrDistance Sensor equation */
	u8LocalTemp = (pow(((u16LocalAdcReading * ADC_5_VOLT_REF) / u16LocalAdcPrecision),-1.173)*56.22 ) ;
     168:	69 81       	ldd	r22, Y+1	; 0x01
     16a:	7a 81       	ldd	r23, Y+2	; 0x02
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 94 07 	call	0xf28	; 0xf28 <__floatunsisf>
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	40 ea       	ldi	r20, 0xA0	; 160
     17a:	50 e4       	ldi	r21, 0x40	; 64
     17c:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     180:	6b 01       	movw	r12, r22
     182:	7c 01       	movw	r14, r24
     184:	b8 01       	movw	r22, r16
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 94 07 	call	0xf28	; 0xf28 <__floatunsisf>
     18e:	9b 01       	movw	r18, r22
     190:	ac 01       	movw	r20, r24
     192:	c7 01       	movw	r24, r14
     194:	b6 01       	movw	r22, r12
     196:	0e 94 f3 06 	call	0xde6	; 0xde6 <__divsf3>
     19a:	2d ed       	ldi	r18, 0xDD	; 221
     19c:	34 e2       	ldi	r19, 0x24	; 36
     19e:	46 e9       	ldi	r20, 0x96	; 150
     1a0:	5f eb       	ldi	r21, 0xBF	; 191
     1a2:	0e 94 8f 08 	call	0x111e	; 0x111e <pow>
     1a6:	28 e4       	ldi	r18, 0x48	; 72
     1a8:	31 ee       	ldi	r19, 0xE1	; 225
     1aa:	40 e6       	ldi	r20, 0x60	; 96
     1ac:	52 e4       	ldi	r21, 0x42	; 66
     1ae:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     1b2:	0e 94 65 07 	call	0xeca	; 0xeca <__fixunssfsi>
     1b6:	86 2f       	mov	r24, r22
	
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	cf 90       	pop	r12
     1cc:	08 95       	ret

000001ce <Pot_Init>:

#include "Potentiometer.h"

void Pot_Init(void)
{
	Adc_Init(&gStrAdc_Configuration);
     1ce:	8d e9       	ldi	r24, 0x9D	; 157
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0e 94 89 03 	call	0x712	; 0x712 <Adc_Init>
     1d6:	08 95       	ret

000001d8 <Pot_ValueGet>:
}

uint16 Pot_ValueGet(void)
{
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	00 d0       	rcall	.+0      	; 0x1de <Pot_ValueGet+0x6>
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
	Adc_ValueType u16LocalAdcReading = 0U;
     1e2:	1a 82       	std	Y+2, r1	; 0x02
     1e4:	19 82       	std	Y+1, r1	; 0x01
	Adc_StartGroupConversion(ADC_GROUP_0);
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	0e 94 c1 03 	call	0x782	; 0x782 <Adc_StartGroupConversion>
	Adc_ReadChannel(POT_PIN, gStrAdc_Configuration.Resolution, &u16LocalAdcReading);
     1ec:	ae 01       	movw	r20, r28
     1ee:	4f 5f       	subi	r20, 0xFF	; 255
     1f0:	5f 4f       	sbci	r21, 0xFF	; 255
     1f2:	60 91 a1 00 	lds	r22, 0x00A1	; 0x8000a1 <gStrAdc_Configuration+0x4>
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	0e 94 c7 03 	call	0x78e	; 0x78e <Adc_ReadChannel>
	return u16LocalAdcReading;
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	9a 81       	ldd	r25, Y+2	; 0x02
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <TB6600STEPPER_Init>:
 */ 
#include "TB6600Stepper.h"
#include <util/delay.h>
#define  F_CPU 16000000U
void TB6600STEPPER_Init(){
	Dio_ChannelDirectionSet(stepperDir,stepPin,DIO_OUTPUT);
     20a:	41 e0       	ldi	r20, 0x01	; 1
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	84 e3       	ldi	r24, 0x34	; 52
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 03 04 	call	0x806	; 0x806 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(stepperDir,dirPin,DIO_OUTPUT);
     216:	41 e0       	ldi	r20, 0x01	; 1
     218:	61 e0       	ldi	r22, 0x01	; 1
     21a:	84 e3       	ldi	r24, 0x34	; 52
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 03 04 	call	0x806	; 0x806 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(stepperDir,enPin,DIO_OUTPUT);
     222:	41 e0       	ldi	r20, 0x01	; 1
     224:	62 e0       	ldi	r22, 0x02	; 2
     226:	84 e3       	ldi	r24, 0x34	; 52
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 03 04 	call	0x806	; 0x806 <Dio_ChannelDirectionSet>

	Dio_ChannelWrite(stepperOut,enPin,DIO_LOW);
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	62 e0       	ldi	r22, 0x02	; 2
     232:	85 e3       	ldi	r24, 0x35	; 53
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 36 04 	call	0x86c	; 0x86c <Dio_ChannelWrite>
     23a:	08 95       	ret

0000023c <TB6600STEPPER_Rotate>:
}


void TB6600STEPPER_Rotate(uint8 angle_of_rotation){
     23c:	1f 93       	push	r17
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	18 2f       	mov	r17, r24
	int i=0,j=0;
     244:	c0 e0       	ldi	r28, 0x00	; 0
     246:	d0 e0       	ldi	r29, 0x00	; 0
	while (i<=angle_of_rotation*45&&i<=200*45)
     248:	19 c0       	rjmp	.+50     	; 0x27c <TB6600STEPPER_Rotate+0x40>
	{
		Dio_ChannelWrite(stepperOut,stepPin,DIO_HIGH);
     24a:	41 e0       	ldi	r20, 0x01	; 1
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	85 e3       	ldi	r24, 0x35	; 53
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 36 04 	call	0x86c	; 0x86c <Dio_ChannelWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     256:	8f ec       	ldi	r24, 0xCF	; 207
     258:	97 e0       	ldi	r25, 0x07	; 7
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <TB6600STEPPER_Rotate+0x1e>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <TB6600STEPPER_Rotate+0x24>
     260:	00 00       	nop
		_delay_us(500);
		Dio_ChannelWrite(stepperOut,stepPin,DIO_LOW);
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	85 e3       	ldi	r24, 0x35	; 53
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 36 04 	call	0x86c	; 0x86c <Dio_ChannelWrite>
     26e:	8f ec       	ldi	r24, 0xCF	; 207
     270:	97 e0       	ldi	r25, 0x07	; 7
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <TB6600STEPPER_Rotate+0x36>
     276:	00 c0       	rjmp	.+0      	; 0x278 <TB6600STEPPER_Rotate+0x3c>
     278:	00 00       	nop
		_delay_us(500);


		i=i+1;
     27a:	21 96       	adiw	r28, 0x01	; 1
}


void TB6600STEPPER_Rotate(uint8 angle_of_rotation){
	int i=0,j=0;
	while (i<=angle_of_rotation*45&&i<=200*45)
     27c:	2d e2       	ldi	r18, 0x2D	; 45
     27e:	12 9f       	mul	r17, r18
     280:	c0 01       	movw	r24, r0
     282:	11 24       	eor	r1, r1
     284:	8c 17       	cp	r24, r28
     286:	9d 07       	cpc	r25, r29
     288:	0c f1       	brlt	.+66     	; 0x2cc <TB6600STEPPER_Rotate+0x90>
     28a:	c9 32       	cpi	r28, 0x29	; 41
     28c:	83 e2       	ldi	r24, 0x23	; 35
     28e:	d8 07       	cpc	r29, r24
     290:	e4 f2       	brlt	.-72     	; 0x24a <TB6600STEPPER_Rotate+0xe>
     292:	c0 e0       	ldi	r28, 0x00	; 0
     294:	d0 e0       	ldi	r29, 0x00	; 0
     296:	1c c0       	rjmp	.+56     	; 0x2d0 <TB6600STEPPER_Rotate+0x94>
	}

	
	while (j<1)
	{
		Dio_ChannelWrite(stepperOut,stepPin,DIO_HIGH);
     298:	41 e0       	ldi	r20, 0x01	; 1
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	85 e3       	ldi	r24, 0x35	; 53
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 36 04 	call	0x86c	; 0x86c <Dio_ChannelWrite>
     2a4:	8f ec       	ldi	r24, 0xCF	; 207
     2a6:	97 e0       	ldi	r25, 0x07	; 7
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <TB6600STEPPER_Rotate+0x6c>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <TB6600STEPPER_Rotate+0x72>
     2ae:	00 00       	nop
		_delay_us(500);
		Dio_ChannelWrite(stepperOut,stepPin,DIO_LOW);
     2b0:	40 e0       	ldi	r20, 0x00	; 0
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	85 e3       	ldi	r24, 0x35	; 53
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 36 04 	call	0x86c	; 0x86c <Dio_ChannelWrite>
     2bc:	8f ec       	ldi	r24, 0xCF	; 207
     2be:	97 e0       	ldi	r25, 0x07	; 7
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <TB6600STEPPER_Rotate+0x84>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <TB6600STEPPER_Rotate+0x8a>
     2c6:	00 00       	nop
		_delay_us(500);


		j=j+1;
     2c8:	21 96       	adiw	r28, 0x01	; 1
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <TB6600STEPPER_Rotate+0x94>
     2cc:	c0 e0       	ldi	r28, 0x00	; 0
     2ce:	d0 e0       	ldi	r29, 0x00	; 0

		i=i+1;
	}

	
	while (j<1)
     2d0:	1c 16       	cp	r1, r28
     2d2:	1d 06       	cpc	r1, r29
     2d4:	0c f7       	brge	.-62     	; 0x298 <TB6600STEPPER_Rotate+0x5c>
		_delay_us(500);


		j=j+1;
	}
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	1f 91       	pop	r17
     2dc:	08 95       	ret

000002de <UART_init>:
}
unsigned char UART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
	return(UDR);			/* Return the byte*/
}
     2de:	2a b1       	in	r18, 0x0a	; 10
     2e0:	28 61       	ori	r18, 0x18	; 24
     2e2:	2a b9       	out	0x0a, r18	; 10
     2e4:	2a b1       	in	r18, 0x0a	; 10
     2e6:	20 68       	ori	r18, 0x80	; 128
     2e8:	2a b9       	out	0x0a, r18	; 10
     2ea:	20 b5       	in	r18, 0x20	; 32
     2ec:	26 68       	ori	r18, 0x86	; 134
     2ee:	20 bd       	out	0x20, r18	; 32
     2f0:	dc 01       	movw	r26, r24
     2f2:	cb 01       	movw	r24, r22
     2f4:	88 0f       	add	r24, r24
     2f6:	99 1f       	adc	r25, r25
     2f8:	aa 1f       	adc	r26, r26
     2fa:	bb 1f       	adc	r27, r27
     2fc:	88 0f       	add	r24, r24
     2fe:	99 1f       	adc	r25, r25
     300:	aa 1f       	adc	r26, r26
     302:	bb 1f       	adc	r27, r27
     304:	9c 01       	movw	r18, r24
     306:	ad 01       	movw	r20, r26
     308:	22 0f       	add	r18, r18
     30a:	33 1f       	adc	r19, r19
     30c:	44 1f       	adc	r20, r20
     30e:	55 1f       	adc	r21, r21
     310:	22 0f       	add	r18, r18
     312:	33 1f       	adc	r19, r19
     314:	44 1f       	adc	r20, r20
     316:	55 1f       	adc	r21, r21
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	74 e2       	ldi	r23, 0x24	; 36
     31c:	84 ef       	ldi	r24, 0xF4	; 244
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 81 0a 	call	0x1502	; 0x1502 <__udivmodsi4>
     324:	8f ef       	ldi	r24, 0xFF	; 255
     326:	82 0f       	add	r24, r18
     328:	89 b9       	out	0x09, r24	; 9
     32a:	da 01       	movw	r26, r20
     32c:	c9 01       	movw	r24, r18
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	a1 09       	sbc	r26, r1
     332:	b1 09       	sbc	r27, r1
     334:	89 2f       	mov	r24, r25
     336:	9a 2f       	mov	r25, r26
     338:	ab 2f       	mov	r26, r27
     33a:	bb 27       	eor	r27, r27
     33c:	80 bd       	out	0x20, r24	; 32
     33e:	08 95       	ret

00000340 <UART_TxChar>:

void UART_TxChar(char ch)
{
	while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
     340:	5d 9b       	sbis	0x0b, 5	; 11
     342:	fe cf       	rjmp	.-4      	; 0x340 <UART_TxChar>
	UDR = ch ;
     344:	8c b9       	out	0x0c, r24	; 12
     346:	08 95       	ret

00000348 <UART_SendString>:
}

void UART_SendString(char *str)
{
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	8c 01       	movw	r16, r24
	unsigned char j=0;
     350:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (str[j]!=0)		/* Send string till null */
     352:	03 c0       	rjmp	.+6      	; 0x35a <UART_SendString+0x12>
	{
		UART_TxChar(str[j]);
     354:	0e 94 a0 01 	call	0x340	; 0x340 <UART_TxChar>
		j++;
     358:	cf 5f       	subi	r28, 0xFF	; 255

void UART_SendString(char *str)
{
	unsigned char j=0;
	
	while (str[j]!=0)		/* Send string till null */
     35a:	f8 01       	movw	r30, r16
     35c:	ec 0f       	add	r30, r28
     35e:	f1 1d       	adc	r31, r1
     360:	80 81       	ld	r24, Z
     362:	81 11       	cpse	r24, r1
     364:	f7 cf       	rjmp	.-18     	; 0x354 <UART_SendString+0xc>
	{
		UART_TxChar(str[j]);
		j++;
	}
}
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	08 95       	ret

0000036e <__vector_1>:
#include "gptConfig.h"
uint8 STEP=0;
uint64 TIMER=0;
uint8 value=0;
ISR(INT0_vect)
{
     36e:	1f 92       	push	r1
     370:	0f 92       	push	r0
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	0f 92       	push	r0
     376:	11 24       	eor	r1, r1
     378:	8f 93       	push	r24
     37a:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37c:	87 e8       	ldi	r24, 0x87	; 135
     37e:	93 e1       	ldi	r25, 0x13	; 19
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	f1 f7       	brne	.-4      	; 0x380 <__vector_1+0x12>
     384:	00 c0       	rjmp	.+0      	; 0x386 <__vector_1+0x18>
     386:	00 00       	nop
	_delay_ms(20);

	STEP=STEP+1;
     388:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <STEP>
     38c:	8f 5f       	subi	r24, 0xFF	; 255
     38e:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <STEP>
     392:	87 e8       	ldi	r24, 0x87	; 135
     394:	93 e1       	ldi	r25, 0x13	; 19
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <__vector_1+0x28>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <__vector_1+0x2e>
     39c:	00 00       	nop
_delay_ms(20);

	
}
     39e:	9f 91       	pop	r25
     3a0:	8f 91       	pop	r24
     3a2:	0f 90       	pop	r0
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	0f 90       	pop	r0
     3a8:	1f 90       	pop	r1
     3aa:	18 95       	reti

000003ac <IR_Speed_Init>:
void IR_Speed_Init(){
	Global_Interrupts_StateSet(GLOBAL_INT_ENABLE);
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <Global_Interrupts_StateSet>
	Ext_Interrupts_Enable(EXT_INT0, EXT_INT_RISING_EDGE);
     3b2:	62 e0       	ldi	r22, 0x02	; 2
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	0e 94 b3 04 	call	0x966	; 0x966 <Ext_Interrupts_Enable>
	Dio_ChannelDirectionSet(PORTD_DIR_REG,DIO_PIN2,DIO_INPUT);
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	62 e0       	ldi	r22, 0x02	; 2
     3be:	81 e3       	ldi	r24, 0x31	; 49
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 03 04 	call	0x806	; 0x806 <Dio_ChannelDirectionSet>
		Timer0_Init(&config);
     3c6:	85 ea       	ldi	r24, 0xA5	; 165
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 54 06 	call	0xca8	; 0xca8 <Timer0_Init>
	TIMER=Timer0_Count();
     3ce:	0e 94 ba 06 	call	0xd74	; 0xd74 <Timer0_Count>
     3d2:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <TIMER>
     3d6:	30 93 ab 00 	sts	0x00AB, r19	; 0x8000ab <TIMER+0x1>
     3da:	40 93 ac 00 	sts	0x00AC, r20	; 0x8000ac <TIMER+0x2>
     3de:	50 93 ad 00 	sts	0x00AD, r21	; 0x8000ad <TIMER+0x3>
     3e2:	60 93 ae 00 	sts	0x00AE, r22	; 0x8000ae <TIMER+0x4>
     3e6:	70 93 af 00 	sts	0x00AF, r23	; 0x8000af <TIMER+0x5>
     3ea:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <TIMER+0x6>
     3ee:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <TIMER+0x7>
     3f2:	08 95       	ret

000003f4 <IR_Speed_Read>:

}

uint8 IR_Speed_Read(){
     3f4:	7f 92       	push	r7
     3f6:	8f 92       	push	r8
     3f8:	9f 92       	push	r9
     3fa:	af 92       	push	r10
     3fc:	bf 92       	push	r11
     3fe:	cf 92       	push	r12
     400:	df 92       	push	r13
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
	if(Timer0_Count()>=TIMER+75){
     40e:	0e 94 ba 06 	call	0xd74	; 0xd74 <Timer0_Count>
     412:	72 2e       	mov	r7, r18
     414:	83 2e       	mov	r8, r19
     416:	94 2e       	mov	r9, r20
     418:	d5 2f       	mov	r29, r21
     41a:	c6 2f       	mov	r28, r22
     41c:	b7 2f       	mov	r27, r23
     41e:	f8 2f       	mov	r31, r24
     420:	e9 2f       	mov	r30, r25
     422:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <TIMER>
     426:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <TIMER+0x1>
     42a:	40 91 ac 00 	lds	r20, 0x00AC	; 0x8000ac <TIMER+0x2>
     42e:	50 91 ad 00 	lds	r21, 0x00AD	; 0x8000ad <TIMER+0x3>
     432:	60 91 ae 00 	lds	r22, 0x00AE	; 0x8000ae <TIMER+0x4>
     436:	70 91 af 00 	lds	r23, 0x00AF	; 0x8000af <TIMER+0x5>
     43a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <TIMER+0x6>
     43e:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <TIMER+0x7>
     442:	ab e4       	ldi	r26, 0x4B	; 75
     444:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__adddi3_s8>
     448:	a2 2e       	mov	r10, r18
     44a:	b3 2e       	mov	r11, r19
     44c:	c4 2e       	mov	r12, r20
     44e:	d5 2e       	mov	r13, r21
     450:	e6 2e       	mov	r14, r22
     452:	f7 2e       	mov	r15, r23
     454:	08 2f       	mov	r16, r24
     456:	19 2f       	mov	r17, r25
     458:	27 2d       	mov	r18, r7
     45a:	38 2d       	mov	r19, r8
     45c:	49 2d       	mov	r20, r9
     45e:	5d 2f       	mov	r21, r29
     460:	6c 2f       	mov	r22, r28
     462:	7b 2f       	mov	r23, r27
     464:	8f 2f       	mov	r24, r31
     466:	9e 2f       	mov	r25, r30
     468:	0e 94 be 0a 	call	0x157c	; 0x157c <__cmpdi2>
     46c:	d0 f0       	brcs	.+52     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		TIMER=Timer0_Count();
     46e:	0e 94 ba 06 	call	0xd74	; 0xd74 <Timer0_Count>
     472:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <TIMER>
     476:	30 93 ab 00 	sts	0x00AB, r19	; 0x8000ab <TIMER+0x1>
     47a:	40 93 ac 00 	sts	0x00AC, r20	; 0x8000ac <TIMER+0x2>
     47e:	50 93 ad 00 	sts	0x00AD, r21	; 0x8000ad <TIMER+0x3>
     482:	60 93 ae 00 	sts	0x00AE, r22	; 0x8000ae <TIMER+0x4>
     486:	70 93 af 00 	sts	0x00AF, r23	; 0x8000af <TIMER+0x5>
     48a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <TIMER+0x6>
     48e:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <TIMER+0x7>
		
			value=STEP;
     492:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <STEP>
     496:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <value>
			STEP=0;
     49a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <STEP>
			return value/2;
     49e:	86 95       	lsr	r24
     4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		
}
else{
			return value/2;
     4a2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <value>
     4a6:	86 95       	lsr	r24
	
}
}
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	ef 90       	pop	r14
     4b4:	df 90       	pop	r13
     4b6:	cf 90       	pop	r12
     4b8:	bf 90       	pop	r11
     4ba:	af 90       	pop	r10
     4bc:	9f 90       	pop	r9
     4be:	8f 90       	pop	r8
     4c0:	7f 90       	pop	r7
     4c2:	08 95       	ret

000004c4 <main>:
volatile	 uint8 Str[20]="echo test";
volatile uint8 k = 0;
volatile uint8 uart_flag = 0;
uint8 Motor_speed=0;
int main(void)
{
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	a3 97       	sbiw	r28, 0x23	; 35
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
	UART_init(9600);
     4d8:	60 e8       	ldi	r22, 0x80	; 128
     4da:	75 e2       	ldi	r23, 0x25	; 37
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 6f 01 	call	0x2de	; 0x2de <UART_init>
		char distance[10];
		


	uint64 TIMER1=0;
TIMER1=Timer0_Count();
     4e4:	0e 94 ba 06 	call	0xd74	; 0xd74 <Timer0_Count>
     4e8:	62 2e       	mov	r6, r18
     4ea:	73 2e       	mov	r7, r19
     4ec:	84 2e       	mov	r8, r20
     4ee:	5f 8f       	std	Y+31, r21	; 0x1f
     4f0:	68 a3       	std	Y+32, r22	; 0x20
     4f2:	79 a3       	std	Y+33, r23	; 0x21
     4f4:	8a a3       	std	Y+34, r24	; 0x22
     4f6:	9b a3       	std	Y+35, r25	; 0x23

	
	Dio_ChannelDirectionSet(PORTC_DIR_REG,DIO_PIN7,DIO_OUTPUT);
     4f8:	41 e0       	ldi	r20, 0x01	; 1
     4fa:	67 e0       	ldi	r22, 0x07	; 7
     4fc:	84 e3       	ldi	r24, 0x34	; 52
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 03 04 	call	0x806	; 0x806 <Dio_ChannelDirectionSet>
		Dio_ChannelDirectionSet(PORTB_DIR_REG,DIO_PIN0,DIO_INPUT);
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	87 e3       	ldi	r24, 0x37	; 55
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 03 04 	call	0x806	; 0x806 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(PORTA_DIR_REG,DIO_PIN0,DIO_INPUT);
     510:	40 e0       	ldi	r20, 0x00	; 0
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	8a e3       	ldi	r24, 0x3A	; 58
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 03 04 	call	0x806	; 0x806 <Dio_ChannelDirectionSet>
		Dio_ChannelDirectionSet(PORTD_DIR_REG,DIO_PIN5,DIO_OUTPUT);
     51c:	41 e0       	ldi	r20, 0x01	; 1
     51e:	65 e0       	ldi	r22, 0x05	; 5
     520:	81 e3       	ldi	r24, 0x31	; 49
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 03 04 	call	0x806	; 0x806 <Dio_ChannelDirectionSet>
				Dio_ChannelDirectionSet(PORTD_DIR_REG,DIO_PIN6,DIO_OUTPUT);
     528:	41 e0       	ldi	r20, 0x01	; 1
     52a:	66 e0       	ldi	r22, 0x06	; 6
     52c:	81 e3       	ldi	r24, 0x31	; 49
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 03 04 	call	0x806	; 0x806 <Dio_ChannelDirectionSet>

TB6600STEPPER_Init();
     534:	0e 94 05 01 	call	0x20a	; 0x20a <TB6600STEPPER_Init>
Pot_Init();
     538:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Pot_Init>
IRDISTANECE_Init();
     53c:	0e 94 8a 00 	call	0x114	; 0x114 <IRDISTANECE_Init>
	IR_Speed_Init();
     540:	0e 94 d6 01 	call	0x3ac	; 0x3ac <IR_Speed_Init>
	Pwm_Init(&gStrPwm_Configuration[PWM_CHANNEL_1]);
     544:	8e e7       	ldi	r24, 0x7E	; 126
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <Pwm_Init>
Pwm_SetDutyCycle(PWM_CHANNEL_1, 0);
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	0e 94 da 05 	call	0xbb4	; 0xbb4 <Pwm_SetDutyCycle>
TB6600STEPPER_Rotate(25);
     556:	89 e1       	ldi	r24, 0x19	; 25
     558:	0e 94 1e 01 	call	0x23c	; 0x23c <TB6600STEPPER_Rotate>

	while(1)
	{
		
		IR_Speed_Read();
     55c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <IR_Speed_Read>
		if (IRDISTANCE_ValueGet()<30)
     560:	0e 94 8f 00 	call	0x11e	; 0x11e <IRDISTANCE_ValueGet>
     564:	8e 31       	cpi	r24, 0x1E	; 30
     566:	b0 f4       	brcc	.+44     	; 0x594 <main+0xd0>
		{
					if (IRDISTANCE_ValueGet()<30)
     568:	0e 94 8f 00 	call	0x11e	; 0x11e <IRDISTANCE_ValueGet>
     56c:	8e 31       	cpi	r24, 0x1E	; 30
     56e:	60 f4       	brcc	.+24     	; 0x588 <main+0xc4>
					{
			
			Dio_ChannelWrite(PORTC_OUT_REG,DIO_PIN7,DIO_HIGH);
     570:	41 e0       	ldi	r20, 0x01	; 1
     572:	67 e0       	ldi	r22, 0x07	; 7
     574:	85 e3       	ldi	r24, 0x35	; 53
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 36 04 	call	0x86c	; 0x86c <Dio_ChannelWrite>
			Pwm_SetDutyCycle(PWM_CHANNEL_1,100U);
     57c:	64 e6       	ldi	r22, 0x64	; 100
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	0e 94 da 05 	call	0xbb4	; 0xbb4 <Pwm_SetDutyCycle>
     586:	06 c0       	rjmp	.+12     	; 0x594 <main+0xd0>

			}else{
			Dio_ChannelWrite(PORTC_OUT_REG,DIO_PIN7,DIO_LOW);
     588:	40 e0       	ldi	r20, 0x00	; 0
     58a:	67 e0       	ldi	r22, 0x07	; 7
     58c:	85 e3       	ldi	r24, 0x35	; 53
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 36 04 	call	0x86c	; 0x86c <Dio_ChannelWrite>

		}
					}
				if(Timer0_Count()>=TIMER1+12){
     594:	0e 94 ba 06 	call	0xd74	; 0xd74 <Timer0_Count>
     598:	92 2e       	mov	r9, r18
     59a:	23 2e       	mov	r2, r19
     59c:	34 2e       	mov	r3, r20
     59e:	45 2e       	mov	r4, r21
     5a0:	56 2e       	mov	r5, r22
     5a2:	b7 2f       	mov	r27, r23
     5a4:	f8 2f       	mov	r31, r24
     5a6:	e9 2f       	mov	r30, r25
     5a8:	26 2d       	mov	r18, r6
     5aa:	37 2d       	mov	r19, r7
     5ac:	48 2d       	mov	r20, r8
     5ae:	5f 8d       	ldd	r21, Y+31	; 0x1f
     5b0:	68 a1       	ldd	r22, Y+32	; 0x20
     5b2:	79 a1       	ldd	r23, Y+33	; 0x21
     5b4:	8a a1       	ldd	r24, Y+34	; 0x22
     5b6:	9b a1       	ldd	r25, Y+35	; 0x23
     5b8:	ac e0       	ldi	r26, 0x0C	; 12
     5ba:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__adddi3_s8>
     5be:	a2 2e       	mov	r10, r18
     5c0:	b3 2e       	mov	r11, r19
     5c2:	c4 2e       	mov	r12, r20
     5c4:	d5 2e       	mov	r13, r21
     5c6:	e6 2e       	mov	r14, r22
     5c8:	f7 2e       	mov	r15, r23
     5ca:	08 2f       	mov	r16, r24
     5cc:	19 2f       	mov	r17, r25
     5ce:	29 2d       	mov	r18, r9
     5d0:	32 2d       	mov	r19, r2
     5d2:	43 2d       	mov	r20, r3
     5d4:	54 2d       	mov	r21, r4
     5d6:	65 2d       	mov	r22, r5
     5d8:	7b 2f       	mov	r23, r27
     5da:	8f 2f       	mov	r24, r31
     5dc:	9e 2f       	mov	r25, r30
     5de:	0e 94 be 0a 	call	0x157c	; 0x157c <__cmpdi2>
     5e2:	08 f4       	brcc	.+2      	; 0x5e6 <main+0x122>
     5e4:	40 c0       	rjmp	.+128    	; 0x666 <main+0x1a2>
itoa(Pot_ValueGet(), Angle, 10);
     5e6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Pot_ValueGet>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     5ea:	4a e0       	ldi	r20, 0x0A	; 10
     5ec:	be 01       	movw	r22, r28
     5ee:	6f 5f       	subi	r22, 0xFF	; 255
     5f0:	7f 4f       	sbci	r23, 0xFF	; 255
     5f2:	0e 94 c7 0a 	call	0x158e	; 0x158e <__itoa_ncheck>
UART_SendString("A:");
     5f6:	82 e9       	ldi	r24, 0x92	; 146
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 a4 01 	call	0x348	; 0x348 <UART_SendString>
UART_SendString(Angle);
     5fe:	ce 01       	movw	r24, r28
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	0e 94 a4 01 	call	0x348	; 0x348 <UART_SendString>

itoa(IR_Speed_Read(), Speed, 10);
     606:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <IR_Speed_Read>
     60a:	4a e0       	ldi	r20, 0x0A	; 10
     60c:	be 01       	movw	r22, r28
     60e:	65 5f       	subi	r22, 0xF5	; 245
     610:	7f 4f       	sbci	r23, 0xFF	; 255
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 c7 0a 	call	0x158e	; 0x158e <__itoa_ncheck>
UART_SendString("S:");
     618:	85 e9       	ldi	r24, 0x95	; 149
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 a4 01 	call	0x348	; 0x348 <UART_SendString>
UART_SendString(Speed);
     620:	ce 01       	movw	r24, r28
     622:	0b 96       	adiw	r24, 0x0b	; 11
     624:	0e 94 a4 01 	call	0x348	; 0x348 <UART_SendString>

itoa(IRDISTANCE_ValueGet(), distance, 10);
     628:	0e 94 8f 00 	call	0x11e	; 0x11e <IRDISTANCE_ValueGet>
     62c:	4a e0       	ldi	r20, 0x0A	; 10
     62e:	be 01       	movw	r22, r28
     630:	6b 5e       	subi	r22, 0xEB	; 235
     632:	7f 4f       	sbci	r23, 0xFF	; 255
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 c7 0a 	call	0x158e	; 0x158e <__itoa_ncheck>
UART_SendString("D:");
     63a:	88 e9       	ldi	r24, 0x98	; 152
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 a4 01 	call	0x348	; 0x348 <UART_SendString>
UART_SendString(distance);
     642:	ce 01       	movw	r24, r28
     644:	45 96       	adiw	r24, 0x15	; 21
     646:	0e 94 a4 01 	call	0x348	; 0x348 <UART_SendString>
UART_SendString("\n");
     64a:	8b e9       	ldi	r24, 0x9B	; 155
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 a4 01 	call	0x348	; 0x348 <UART_SendString>
					TIMER1=Timer0_Count();
     652:	0e 94 ba 06 	call	0xd74	; 0xd74 <Timer0_Count>
     656:	62 2e       	mov	r6, r18
     658:	73 2e       	mov	r7, r19
     65a:	84 2e       	mov	r8, r20
     65c:	5f 8f       	std	Y+31, r21	; 0x1f
     65e:	68 a3       	std	Y+32, r22	; 0x20
     660:	79 a3       	std	Y+33, r23	; 0x21
     662:	8a a3       	std	Y+34, r24	; 0x22
     664:	9b a3       	std	Y+35, r25	; 0x23
UART_SendString(Str);*/

					
				}
					
		if (Dio_ChannelRead(PORTB_INP_REG,DIO_PIN0))
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	86 e3       	ldi	r24, 0x36	; 54
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 21 04 	call	0x842	; 0x842 <Dio_ChannelRead>
			
		}

	
		
	}
     670:	75 cf       	rjmp	.-278    	; 0x55c <main+0x98>

00000672 <__vector_13>:
	}
ISR (USART_RXC_vect)
{
     672:	1f 92       	push	r1
     674:	0f 92       	push	r0
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	0f 92       	push	r0
     67a:	11 24       	eor	r1, r1
     67c:	2f 93       	push	r18
     67e:	3f 93       	push	r19
     680:	4f 93       	push	r20
     682:	5f 93       	push	r21
     684:	6f 93       	push	r22
     686:	7f 93       	push	r23
     688:	8f 93       	push	r24
     68a:	9f 93       	push	r25
     68c:	af 93       	push	r26
     68e:	bf 93       	push	r27
     690:	ef 93       	push	r30
     692:	ff 93       	push	r31
	
		Str[k]=UDR;
     694:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <__data_end>
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	8c b1       	in	r24, 0x0c	; 12
     69c:	e0 5a       	subi	r30, 0xA0	; 160
     69e:	ff 4f       	sbci	r31, 0xFF	; 255
     6a0:	80 83       	st	Z, r24
		k=k+1;
     6a2:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
     6a6:	8f 5f       	subi	r24, 0xFF	; 255
     6a8:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__data_end>
if (k>=2)
     6ac:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
     6b0:	82 30       	cpi	r24, 0x02	; 2
     6b2:	c0 f0       	brcs	.+48     	; 0x6e4 <__vector_13+0x72>
{
	k=0;
     6b4:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end>
	
	if(Str[0]=='A'){
     6b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     6bc:	81 34       	cpi	r24, 0x41	; 65
     6be:	29 f4       	brne	.+10     	; 0x6ca <__vector_13+0x58>
TB6600STEPPER_Rotate(Str[1]);
     6c0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     6c4:	0e 94 1e 01 	call	0x23c	; 0x23c <TB6600STEPPER_Rotate>
     6c8:	0d c0       	rjmp	.+26     	; 0x6e4 <__vector_13+0x72>
	}else if (Str[0]=='M')
     6ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     6ce:	8d 34       	cpi	r24, 0x4D	; 77
     6d0:	49 f4       	brne	.+18     	; 0x6e4 <__vector_13+0x72>
	{
		Pwm_SetDutyCycle(PWM_CHANNEL_1,100- Str[1]);
     6d2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     6d6:	64 e6       	ldi	r22, 0x64	; 100
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	68 1b       	sub	r22, r24
     6dc:	71 09       	sbc	r23, r1
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 da 05 	call	0xbb4	; 0xbb4 <Pwm_SetDutyCycle>

	}
}
     6e4:	ff 91       	pop	r31
     6e6:	ef 91       	pop	r30
     6e8:	bf 91       	pop	r27
     6ea:	af 91       	pop	r26
     6ec:	9f 91       	pop	r25
     6ee:	8f 91       	pop	r24
     6f0:	7f 91       	pop	r23
     6f2:	6f 91       	pop	r22
     6f4:	5f 91       	pop	r21
     6f6:	4f 91       	pop	r20
     6f8:	3f 91       	pop	r19
     6fa:	2f 91       	pop	r18
     6fc:	0f 90       	pop	r0
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	0f 90       	pop	r0
     702:	1f 90       	pop	r1
     704:	18 95       	reti

00000706 <Adc_ConvStateGet>:
{
	/* !Comment: Stop conversion of the specified ADC Group */
	switch(Group)
	{
		case ADC_GROUP_0:
		CLEAR_BIT(*ADC_CTRL_STATUS_A_REG, ADC_START_CONV_BIT_NUM);
     706:	34 99       	sbic	0x06, 4	; 6
     708:	02 c0       	rjmp	.+4      	; 0x70e <Adc_ConvStateGet+0x8>
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	08 95       	ret
     70e:	82 e0       	ldi	r24, 0x02	; 2
     710:	08 95       	ret

00000712 <Adc_Init>:
     712:	fc 01       	movw	r30, r24
     714:	17 b8       	out	0x07, r1	; 7
     716:	16 b8       	out	0x06, r1	; 6
     718:	80 b7       	in	r24, 0x30	; 48
     71a:	8f 71       	andi	r24, 0x1F	; 31
     71c:	80 bf       	out	0x30, r24	; 48
     71e:	80 81       	ld	r24, Z
     720:	81 11       	cpse	r24, r1
     722:	2e c0       	rjmp	.+92     	; 0x780 <Adc_Init+0x6e>
     724:	82 81       	ldd	r24, Z+2	; 0x02
     726:	88 23       	and	r24, r24
     728:	19 f0       	breq	.+6      	; 0x730 <Adc_Init+0x1e>
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	39 f0       	breq	.+14     	; 0x73c <Adc_Init+0x2a>
     72e:	0d c0       	rjmp	.+26     	; 0x74a <Adc_Init+0x38>
     730:	86 b1       	in	r24, 0x06	; 6
     732:	80 62       	ori	r24, 0x20	; 32
     734:	86 b9       	out	0x06, r24	; 6
     736:	80 b7       	in	r24, 0x30	; 48
     738:	80 bf       	out	0x30, r24	; 48
     73a:	07 c0       	rjmp	.+14     	; 0x74a <Adc_Init+0x38>
     73c:	86 b1       	in	r24, 0x06	; 6
     73e:	80 62       	ori	r24, 0x20	; 32
     740:	86 b9       	out	0x06, r24	; 6
     742:	90 b7       	in	r25, 0x30	; 48
     744:	85 81       	ldd	r24, Z+5	; 0x05
     746:	89 2b       	or	r24, r25
     748:	80 bf       	out	0x30, r24	; 48
     74a:	97 b1       	in	r25, 0x07	; 7
     74c:	81 81       	ldd	r24, Z+1	; 0x01
     74e:	89 2b       	or	r24, r25
     750:	87 b9       	out	0x07, r24	; 7
     752:	84 81       	ldd	r24, Z+4	; 0x04
     754:	88 23       	and	r24, r24
     756:	19 f0       	breq	.+6      	; 0x75e <Adc_Init+0x4c>
     758:	81 30       	cpi	r24, 0x01	; 1
     75a:	29 f0       	breq	.+10     	; 0x766 <Adc_Init+0x54>
     75c:	08 c0       	rjmp	.+16     	; 0x76e <Adc_Init+0x5c>
     75e:	87 b1       	in	r24, 0x07	; 7
     760:	80 62       	ori	r24, 0x20	; 32
     762:	87 b9       	out	0x07, r24	; 7
     764:	04 c0       	rjmp	.+8      	; 0x76e <Adc_Init+0x5c>
     766:	97 b1       	in	r25, 0x07	; 7
     768:	86 81       	ldd	r24, Z+6	; 0x06
     76a:	89 2b       	or	r24, r25
     76c:	87 b9       	out	0x07, r24	; 7
     76e:	96 b1       	in	r25, 0x06	; 6
     770:	23 81       	ldd	r18, Z+3	; 0x03
     772:	87 81       	ldd	r24, Z+7	; 0x07
     774:	82 2b       	or	r24, r18
     776:	89 2b       	or	r24, r25
     778:	86 b9       	out	0x06, r24	; 6
     77a:	86 b1       	in	r24, 0x06	; 6
     77c:	80 68       	ori	r24, 0x80	; 128
     77e:	86 b9       	out	0x06, r24	; 6
     780:	08 95       	ret

00000782 <Adc_StartGroupConversion>:
     782:	81 11       	cpse	r24, r1
     784:	03 c0       	rjmp	.+6      	; 0x78c <Adc_StartGroupConversion+0xa>
     786:	86 b1       	in	r24, 0x06	; 6
     788:	80 64       	ori	r24, 0x40	; 64
     78a:	86 b9       	out	0x06, r24	; 6
     78c:	08 95       	ret

0000078e <Adc_ReadChannel>:
		break;
	}	
}

void Adc_ReadChannel(Adc_ChannelType Channel, Adc_ResolutionType Resolution, Adc_ValueType *DataBufferPtr)
{
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	c6 2f       	mov	r28, r22
     796:	8a 01       	movw	r16, r20
	/* !Comment: Clear the channel selection bits in the ADMUX register */
	*ADC_MUX_REG &= 0xE0U;
     798:	97 b1       	in	r25, 0x07	; 7
     79a:	90 7e       	andi	r25, 0xE0	; 224
     79c:	97 b9       	out	0x07, r25	; 7
	/* !Comment: Select the required channel to read the result from it */
	*ADC_MUX_REG |= Channel;
     79e:	97 b1       	in	r25, 0x07	; 7
     7a0:	89 2b       	or	r24, r25
     7a2:	87 b9       	out	0x07, r24	; 7
	/* !Comment: Wait until the Conversion is finished */
	while (Adc_ConvStateGet() == ADC_BUSY)
     7a4:	0e 94 83 03 	call	0x706	; 0x706 <Adc_ConvStateGet>
     7a8:	81 30       	cpi	r24, 0x01	; 1
     7aa:	e1 f3       	breq	.-8      	; 0x7a4 <Adc_ReadChannel+0x16>
	{
		/* Do Nothing */
	}
	/* !Comment: Read the result when the conversion is completed */
	switch(Resolution)
     7ac:	cc 23       	and	r28, r28
     7ae:	19 f0       	breq	.+6      	; 0x7b6 <Adc_ReadChannel+0x28>
     7b0:	c1 30       	cpi	r28, 0x01	; 1
     7b2:	39 f0       	breq	.+14     	; 0x7c2 <Adc_ReadChannel+0x34>
     7b4:	21 c0       	rjmp	.+66     	; 0x7f8 <Adc_ReadChannel+0x6a>
	{
		case ADC_EIGHT_BIT:
		*DataBufferPtr = *ADC_DATA_HIGH_REG;
     7b6:	85 b1       	in	r24, 0x05	; 5
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	f8 01       	movw	r30, r16
     7bc:	91 83       	std	Z+1, r25	; 0x01
     7be:	80 83       	st	Z, r24
		break;
     7c0:	1b c0       	rjmp	.+54     	; 0x7f8 <Adc_ReadChannel+0x6a>
		case ADC_TEN_BIT:
		switch(gStrAdc_Configuration.ResAlignment)
     7c2:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <gStrAdc_Configuration+0x6>
     7c6:	88 23       	and	r24, r24
     7c8:	19 f0       	breq	.+6      	; 0x7d0 <Adc_ReadChannel+0x42>
     7ca:	80 32       	cpi	r24, 0x20	; 32
     7cc:	39 f0       	breq	.+14     	; 0x7dc <Adc_ReadChannel+0x4e>
     7ce:	14 c0       	rjmp	.+40     	; 0x7f8 <Adc_ReadChannel+0x6a>
		{
			case ADC_ALIGN_RIGHT:
			*DataBufferPtr = *(uint16*)ADC_DATA_LOW_REG;
     7d0:	84 b1       	in	r24, 0x04	; 4
     7d2:	95 b1       	in	r25, 0x05	; 5
     7d4:	f8 01       	movw	r30, r16
     7d6:	91 83       	std	Z+1, r25	; 0x01
     7d8:	80 83       	st	Z, r24
			break;
     7da:	0e c0       	rjmp	.+28     	; 0x7f8 <Adc_ReadChannel+0x6a>
			case ADC_ALIGN_LEFT:
			*DataBufferPtr = (uint16)((*(uint16*)ADC_DATA_LOW_REG>>6U));
     7dc:	84 b1       	in	r24, 0x04	; 4
     7de:	95 b1       	in	r25, 0x05	; 5
     7e0:	00 24       	eor	r0, r0
     7e2:	88 0f       	add	r24, r24
     7e4:	99 1f       	adc	r25, r25
     7e6:	00 1c       	adc	r0, r0
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	00 1c       	adc	r0, r0
     7ee:	89 2f       	mov	r24, r25
     7f0:	90 2d       	mov	r25, r0
     7f2:	f8 01       	movw	r30, r16
     7f4:	91 83       	std	Z+1, r25	; 0x01
     7f6:	80 83       	st	Z, r24
		break;
		default:
		break;
	}
	/* !Comment: Clear the ADIF by writing logic one after reading the result */
	SET_BIT(*ADC_CTRL_STATUS_A_REG, ADC_INT_FLAG_BIT_NUM);
     7f8:	86 b1       	in	r24, 0x06	; 6
     7fa:	80 61       	ori	r24, 0x10	; 16
     7fc:	86 b9       	out	0x06, r24	; 6
}
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	08 95       	ret

00000806 <Dio_ChannelDirectionSet>:
#include "ATmega32_Cfg.h"

void Dio_ChannelDirectionSet(volatile uint8 * Port_reg, DioPinEnum_t Channel, DioPinDirectionEnum_t Direction)
{

	switch(Direction)
     806:	44 23       	and	r20, r20
     808:	19 f0       	breq	.+6      	; 0x810 <Dio_ChannelDirectionSet+0xa>
     80a:	41 30       	cpi	r20, 0x01	; 1
     80c:	71 f0       	breq	.+28     	; 0x82a <Dio_ChannelDirectionSet+0x24>
     80e:	08 95       	ret
	{
		case DIO_INPUT:
		CLEAR_BIT(*Port_reg,Channel);
     810:	fc 01       	movw	r30, r24
     812:	40 81       	ld	r20, Z
     814:	21 e0       	ldi	r18, 0x01	; 1
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	02 c0       	rjmp	.+4      	; 0x81e <Dio_ChannelDirectionSet+0x18>
     81a:	22 0f       	add	r18, r18
     81c:	33 1f       	adc	r19, r19
     81e:	6a 95       	dec	r22
     820:	e2 f7       	brpl	.-8      	; 0x81a <Dio_ChannelDirectionSet+0x14>
     822:	20 95       	com	r18
     824:	24 23       	and	r18, r20
     826:	20 83       	st	Z, r18
		break;
     828:	08 95       	ret
		case DIO_OUTPUT:
		SET_BIT(*Port_reg,Channel);
     82a:	fc 01       	movw	r30, r24
     82c:	40 81       	ld	r20, Z
     82e:	21 e0       	ldi	r18, 0x01	; 1
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	02 c0       	rjmp	.+4      	; 0x838 <Dio_ChannelDirectionSet+0x32>
     834:	22 0f       	add	r18, r18
     836:	33 1f       	adc	r19, r19
     838:	6a 95       	dec	r22
     83a:	e2 f7       	brpl	.-8      	; 0x834 <Dio_ChannelDirectionSet+0x2e>
     83c:	24 2b       	or	r18, r20
     83e:	20 83       	st	Z, r18
     840:	08 95       	ret

00000842 <Dio_ChannelRead>:
	}
}

DioPinStateEnum_t Dio_ChannelRead(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*Port_reg,Channel);
     842:	fc 01       	movw	r30, r24
     844:	40 81       	ld	r20, Z
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	9c 01       	movw	r18, r24
     84c:	06 2e       	mov	r0, r22
     84e:	02 c0       	rjmp	.+4      	; 0x854 <Dio_ChannelRead+0x12>
     850:	22 0f       	add	r18, r18
     852:	33 1f       	adc	r19, r19
     854:	0a 94       	dec	r0
     856:	e2 f7       	brpl	.-8      	; 0x850 <Dio_ChannelRead+0xe>
     858:	84 2f       	mov	r24, r20
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	82 23       	and	r24, r18
     85e:	93 23       	and	r25, r19
     860:	02 c0       	rjmp	.+4      	; 0x866 <__stack+0x7>
     862:	96 95       	lsr	r25
     864:	87 95       	ror	r24
     866:	6a 95       	dec	r22
     868:	e2 f7       	brpl	.-8      	; 0x862 <__stack+0x3>
	return (u8LocalPinValue);
}
     86a:	08 95       	ret

0000086c <Dio_ChannelWrite>:

void Dio_ChannelWrite(volatile uint8 * Port_reg, DioPinEnum_t Channel, DioPinStateEnum_t State)
{
	switch(State)
     86c:	44 23       	and	r20, r20
     86e:	19 f0       	breq	.+6      	; 0x876 <Dio_ChannelWrite+0xa>
     870:	41 30       	cpi	r20, 0x01	; 1
     872:	71 f0       	breq	.+28     	; 0x890 <Dio_ChannelWrite+0x24>
     874:	08 95       	ret
	{
		case DIO_LOW:
		CLEAR_BIT(*Port_reg,Channel);
     876:	fc 01       	movw	r30, r24
     878:	40 81       	ld	r20, Z
     87a:	21 e0       	ldi	r18, 0x01	; 1
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	02 c0       	rjmp	.+4      	; 0x884 <Dio_ChannelWrite+0x18>
     880:	22 0f       	add	r18, r18
     882:	33 1f       	adc	r19, r19
     884:	6a 95       	dec	r22
     886:	e2 f7       	brpl	.-8      	; 0x880 <Dio_ChannelWrite+0x14>
     888:	20 95       	com	r18
     88a:	24 23       	and	r18, r20
     88c:	20 83       	st	Z, r18
		break;
     88e:	08 95       	ret
		case DIO_HIGH:
		SET_BIT(*Port_reg,Channel);
     890:	fc 01       	movw	r30, r24
     892:	40 81       	ld	r20, Z
     894:	21 e0       	ldi	r18, 0x01	; 1
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	02 c0       	rjmp	.+4      	; 0x89e <Dio_ChannelWrite+0x32>
     89a:	22 0f       	add	r18, r18
     89c:	33 1f       	adc	r19, r19
     89e:	6a 95       	dec	r22
     8a0:	e2 f7       	brpl	.-8      	; 0x89a <Dio_ChannelWrite+0x2e>
     8a2:	24 2b       	or	r18, r20
     8a4:	20 83       	st	Z, r18
     8a6:	08 95       	ret

000008a8 <Ext_Interrupt_ModeSet>:
		break;
		case EXT_INT1:
		CLEAR_BIT(*GENRAL_INT_CTRL_REG, INT1_SOURCE_ENABLE_BIT);
		break;
		case EXT_INT2:
		CLEAR_BIT(*GENRAL_INT_CTRL_REG, INT2_SOURCE_ENABLE_BIT);
     8a8:	81 30       	cpi	r24, 0x01	; 1
     8aa:	f1 f0       	breq	.+60     	; 0x8e8 <Ext_Interrupt_ModeSet+0x40>
     8ac:	30 f0       	brcs	.+12     	; 0x8ba <Ext_Interrupt_ModeSet+0x12>
     8ae:	82 30       	cpi	r24, 0x02	; 2
     8b0:	89 f1       	breq	.+98     	; 0x914 <Ext_Interrupt_ModeSet+0x6c>
     8b2:	83 30       	cpi	r24, 0x03	; 3
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <Ext_Interrupt_ModeSet+0x10>
     8b6:	42 c0       	rjmp	.+132    	; 0x93c <Ext_Interrupt_ModeSet+0x94>
     8b8:	08 95       	ret
     8ba:	35 b7       	in	r19, 0x35	; 53
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	fc 01       	movw	r30, r24
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <Ext_Interrupt_ModeSet+0x20>
     8c4:	ee 0f       	add	r30, r30
     8c6:	ff 1f       	adc	r31, r31
     8c8:	6a 95       	dec	r22
     8ca:	e2 f7       	brpl	.-8      	; 0x8c4 <Ext_Interrupt_ModeSet+0x1c>
     8cc:	2e 2f       	mov	r18, r30
     8ce:	20 95       	com	r18
     8d0:	23 23       	and	r18, r19
     8d2:	25 bf       	out	0x35, r18	; 53
     8d4:	25 b7       	in	r18, 0x35	; 53
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <Ext_Interrupt_ModeSet+0x34>
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	4a 95       	dec	r20
     8de:	e2 f7       	brpl	.-8      	; 0x8d8 <Ext_Interrupt_ModeSet+0x30>
     8e0:	80 95       	com	r24
     8e2:	82 23       	and	r24, r18
     8e4:	85 bf       	out	0x35, r24	; 53
     8e6:	08 95       	ret
     8e8:	35 b7       	in	r19, 0x35	; 53
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	fc 01       	movw	r30, r24
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <Ext_Interrupt_ModeSet+0x4e>
     8f2:	ee 0f       	add	r30, r30
     8f4:	ff 1f       	adc	r31, r31
     8f6:	6a 95       	dec	r22
     8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <Ext_Interrupt_ModeSet+0x4a>
     8fa:	2e 2f       	mov	r18, r30
     8fc:	20 95       	com	r18
     8fe:	23 23       	and	r18, r19
     900:	25 bf       	out	0x35, r18	; 53
     902:	25 b7       	in	r18, 0x35	; 53
     904:	02 c0       	rjmp	.+4      	; 0x90a <Ext_Interrupt_ModeSet+0x62>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	4a 95       	dec	r20
     90c:	e2 f7       	brpl	.-8      	; 0x906 <Ext_Interrupt_ModeSet+0x5e>
     90e:	82 2b       	or	r24, r18
     910:	85 bf       	out	0x35, r24	; 53
     912:	08 95       	ret
     914:	55 b7       	in	r21, 0x35	; 53
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	9c 01       	movw	r18, r24
     91c:	02 c0       	rjmp	.+4      	; 0x922 <Ext_Interrupt_ModeSet+0x7a>
     91e:	22 0f       	add	r18, r18
     920:	33 1f       	adc	r19, r19
     922:	6a 95       	dec	r22
     924:	e2 f7       	brpl	.-8      	; 0x91e <Ext_Interrupt_ModeSet+0x76>
     926:	25 2b       	or	r18, r21
     928:	25 bf       	out	0x35, r18	; 53
     92a:	25 b7       	in	r18, 0x35	; 53
     92c:	02 c0       	rjmp	.+4      	; 0x932 <Ext_Interrupt_ModeSet+0x8a>
     92e:	88 0f       	add	r24, r24
     930:	99 1f       	adc	r25, r25
     932:	4a 95       	dec	r20
     934:	e2 f7       	brpl	.-8      	; 0x92e <Ext_Interrupt_ModeSet+0x86>
     936:	82 2b       	or	r24, r18
     938:	85 bf       	out	0x35, r24	; 53
     93a:	08 95       	ret
     93c:	55 b7       	in	r21, 0x35	; 53
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	9c 01       	movw	r18, r24
     944:	02 c0       	rjmp	.+4      	; 0x94a <Ext_Interrupt_ModeSet+0xa2>
     946:	22 0f       	add	r18, r18
     948:	33 1f       	adc	r19, r19
     94a:	6a 95       	dec	r22
     94c:	e2 f7       	brpl	.-8      	; 0x946 <Ext_Interrupt_ModeSet+0x9e>
     94e:	25 2b       	or	r18, r21
     950:	25 bf       	out	0x35, r18	; 53
     952:	25 b7       	in	r18, 0x35	; 53
     954:	02 c0       	rjmp	.+4      	; 0x95a <Ext_Interrupt_ModeSet+0xb2>
     956:	88 0f       	add	r24, r24
     958:	99 1f       	adc	r25, r25
     95a:	4a 95       	dec	r20
     95c:	e2 f7       	brpl	.-8      	; 0x956 <Ext_Interrupt_ModeSet+0xae>
     95e:	80 95       	com	r24
     960:	82 23       	and	r24, r18
     962:	85 bf       	out	0x35, r24	; 53
     964:	08 95       	ret

00000966 <Ext_Interrupts_Enable>:
     966:	96 2f       	mov	r25, r22
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	69 f0       	breq	.+26     	; 0x986 <Ext_Interrupts_Enable+0x20>
     96c:	18 f0       	brcs	.+6      	; 0x974 <Ext_Interrupts_Enable+0xe>
     96e:	82 30       	cpi	r24, 0x02	; 2
     970:	99 f0       	breq	.+38     	; 0x998 <Ext_Interrupts_Enable+0x32>
     972:	08 95       	ret
     974:	41 e0       	ldi	r20, 0x01	; 1
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	89 2f       	mov	r24, r25
     97a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <Ext_Interrupt_ModeSet>
     97e:	8b b7       	in	r24, 0x3b	; 59
     980:	80 64       	ori	r24, 0x40	; 64
     982:	8b bf       	out	0x3b, r24	; 59
     984:	08 95       	ret
     986:	43 e0       	ldi	r20, 0x03	; 3
     988:	62 e0       	ldi	r22, 0x02	; 2
     98a:	89 2f       	mov	r24, r25
     98c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <Ext_Interrupt_ModeSet>
     990:	8b b7       	in	r24, 0x3b	; 59
     992:	80 68       	ori	r24, 0x80	; 128
     994:	8b bf       	out	0x3b, r24	; 59
     996:	08 95       	ret
     998:	61 30       	cpi	r22, 0x01	; 1
     99a:	19 f0       	breq	.+6      	; 0x9a2 <Ext_Interrupts_Enable+0x3c>
     99c:	62 30       	cpi	r22, 0x02	; 2
     99e:	29 f0       	breq	.+10     	; 0x9aa <Ext_Interrupts_Enable+0x44>
     9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <Ext_Interrupts_Enable+0x4a>
     9a2:	84 b7       	in	r24, 0x34	; 52
     9a4:	8f 7b       	andi	r24, 0xBF	; 191
     9a6:	84 bf       	out	0x34, r24	; 52
     9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <Ext_Interrupts_Enable+0x4a>
     9aa:	84 b7       	in	r24, 0x34	; 52
     9ac:	80 64       	ori	r24, 0x40	; 64
     9ae:	84 bf       	out	0x34, r24	; 52
     9b0:	8b b7       	in	r24, 0x3b	; 59
     9b2:	80 62       	ori	r24, 0x20	; 32
     9b4:	8b bf       	out	0x3b, r24	; 59
     9b6:	08 95       	ret

000009b8 <Global_Interrupts_StateSet>:
		break;
	}
}
void Global_Interrupts_StateSet(GlobalInt_StateEnum_t State)
{
	switch(State)
     9b8:	88 23       	and	r24, r24
     9ba:	19 f0       	breq	.+6      	; 0x9c2 <Global_Interrupts_StateSet+0xa>
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	29 f0       	breq	.+10     	; 0x9ca <Global_Interrupts_StateSet+0x12>
     9c0:	08 95       	ret
	{
		case GLOBAL_INT_DISABLE:
		CLEAR_BIT(*AVR_STATUS_REG, GLOBAL_INTERRUPTS_ENABLE_BIT);
     9c2:	8f b7       	in	r24, 0x3f	; 63
     9c4:	8f 77       	andi	r24, 0x7F	; 127
     9c6:	8f bf       	out	0x3f, r24	; 63
		break;
     9c8:	08 95       	ret
		case GLOBAL_INT_ENABLE:
		SET_BIT(*AVR_STATUS_REG, GLOBAL_INTERRUPTS_ENABLE_BIT);
     9ca:	8f b7       	in	r24, 0x3f	; 63
     9cc:	80 68       	ori	r24, 0x80	; 128
     9ce:	8f bf       	out	0x3f, r24	; 63
     9d0:	08 95       	ret

000009d2 <Pwm_Init>:
#include "Macros.h"

uint16 gu16TimerTopValue = 0U;

void Pwm_Init(const Pwm_ConfigType *ConfigPtr)
{
     9d2:	cf 92       	push	r12
     9d4:	df 92       	push	r13
     9d6:	ef 92       	push	r14
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	fc 01       	movw	r30, r24
	switch(ConfigPtr->PwmCh)
     9e4:	80 81       	ld	r24, Z
     9e6:	88 23       	and	r24, r24
     9e8:	19 f0       	breq	.+6      	; 0x9f0 <Pwm_Init+0x1e>
     9ea:	81 30       	cpi	r24, 0x01	; 1
     9ec:	99 f1       	breq	.+102    	; 0xa54 <Pwm_Init+0x82>
     9ee:	d9 c0       	rjmp	.+434    	; 0xba2 <Pwm_Init+0x1d0>
	{
		case PWM_CHANNEL_0:
		/* !Comment: Clear Registers before applying configuration */
		*TIMER0_CTRL_REG = 0x00U;
     9f0:	13 be       	out	0x33, r1	; 51
		*TIMER0_COUNTER_REG = 0x00U;
     9f2:	12 be       	out	0x32, r1	; 50
		/* !Comment: Apply configuration */
		*TIMER0_CTRL_REG |= ConfigPtr->PwmClkDiv | ConfigPtr->PwmMode | ConfigPtr->PwmPolarity;
     9f4:	93 b7       	in	r25, 0x33	; 51
     9f6:	33 81       	ldd	r19, Z+3	; 0x03
     9f8:	81 81       	ldd	r24, Z+1	; 0x01
     9fa:	22 81       	ldd	r18, Z+2	; 0x02
     9fc:	83 2b       	or	r24, r19
     9fe:	82 2b       	or	r24, r18
     a00:	89 2b       	or	r24, r25
     a02:	83 bf       	out	0x33, r24	; 51
		switch(ConfigPtr->PwmPolarity)
     a04:	82 81       	ldd	r24, Z+2	; 0x02
     a06:	80 32       	cpi	r24, 0x20	; 32
     a08:	b1 f0       	breq	.+44     	; 0xa36 <Pwm_Init+0x64>
     a0a:	80 33       	cpi	r24, 0x30	; 48
     a0c:	09 f0       	breq	.+2      	; 0xa10 <Pwm_Init+0x3e>
     a0e:	c9 c0       	rjmp	.+402    	; 0xba2 <Pwm_Init+0x1d0>
		{
			case PWM_HIGH:
			*TIMER0_CMP_REG = (uint8) (((100U - ConfigPtr->PwmDuty) / 100U) * PWM0_RESOLUTION);
     a10:	80 85       	ldd	r24, Z+8	; 0x08
     a12:	91 85       	ldd	r25, Z+9	; 0x09
     a14:	24 e6       	ldi	r18, 0x64	; 100
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	28 1b       	sub	r18, r24
     a1a:	39 0b       	sbc	r19, r25
     a1c:	36 95       	lsr	r19
     a1e:	27 95       	ror	r18
     a20:	36 95       	lsr	r19
     a22:	27 95       	ror	r18
     a24:	ab e7       	ldi	r26, 0x7B	; 123
     a26:	b4 e1       	ldi	r27, 0x14	; 20
     a28:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__umulhisi3>
     a2c:	96 95       	lsr	r25
     a2e:	87 95       	ror	r24
     a30:	81 95       	neg	r24
     a32:	8c bf       	out	0x3c, r24	; 60
			break;
     a34:	b6 c0       	rjmp	.+364    	; 0xba2 <Pwm_Init+0x1d0>
			case PWM_LOW:
			*TIMER0_CMP_REG = (uint8) ((ConfigPtr->PwmDuty / 100U) * PWM0_RESOLUTION);
     a36:	20 85       	ldd	r18, Z+8	; 0x08
     a38:	31 85       	ldd	r19, Z+9	; 0x09
     a3a:	36 95       	lsr	r19
     a3c:	27 95       	ror	r18
     a3e:	36 95       	lsr	r19
     a40:	27 95       	ror	r18
     a42:	ab e7       	ldi	r26, 0x7B	; 123
     a44:	b4 e1       	ldi	r27, 0x14	; 20
     a46:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__umulhisi3>
     a4a:	96 95       	lsr	r25
     a4c:	87 95       	ror	r24
     a4e:	81 95       	neg	r24
     a50:	8c bf       	out	0x3c, r24	; 60
			break;
     a52:	a7 c0       	rjmp	.+334    	; 0xba2 <Pwm_Init+0x1d0>
			break;
		}
		break;
		case PWM_CHANNEL_1:
		/* !Comment: Clear Registers before applying configuration */
		*TIMER1_CTRL_A_REG = 0x00U;
     a54:	1f bc       	out	0x2f, r1	; 47
		*TIMER1_CTRL_B_REG = 0x00U;
     a56:	1e bc       	out	0x2e, r1	; 46
		*(uint16 *)TIMER1_COUNTER_LOW_REG = 0x00U;
     a58:	1d bc       	out	0x2d, r1	; 45
     a5a:	1c bc       	out	0x2c, r1	; 44
		/* !Comment: Apply configuration */
		switch(ConfigPtr->PwmMode)
     a5c:	81 81       	ldd	r24, Z+1	; 0x01
     a5e:	80 34       	cpi	r24, 0x40	; 64
     a60:	79 f0       	breq	.+30     	; 0xa80 <Pwm_Init+0xae>
     a62:	88 34       	cpi	r24, 0x48	; 72
     a64:	c9 f4       	brne	.+50     	; 0xa98 <Pwm_Init+0xc6>
		{
			case PWM_MODE_FAST:
			CLEAR_BIT(*TIMER1_CTRL_A_REG, 0U);
     a66:	8f b5       	in	r24, 0x2f	; 47
     a68:	8e 7f       	andi	r24, 0xFE	; 254
     a6a:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(*TIMER1_CTRL_A_REG, 1U);
     a6c:	8f b5       	in	r24, 0x2f	; 47
     a6e:	82 60       	ori	r24, 0x02	; 2
     a70:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(*TIMER1_CTRL_B_REG, 3U);
     a72:	8e b5       	in	r24, 0x2e	; 46
     a74:	88 60       	ori	r24, 0x08	; 8
     a76:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(*TIMER1_CTRL_B_REG, 4U);
     a78:	8e b5       	in	r24, 0x2e	; 46
     a7a:	80 61       	ori	r24, 0x10	; 16
     a7c:	8e bd       	out	0x2e, r24	; 46
			break;
     a7e:	0c c0       	rjmp	.+24     	; 0xa98 <Pwm_Init+0xc6>
			case PWM_MODE_PHASE_CORRECT:
			SET_BIT(*TIMER1_CTRL_A_REG, 0U);
     a80:	8f b5       	in	r24, 0x2f	; 47
     a82:	81 60       	ori	r24, 0x01	; 1
     a84:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(*TIMER1_CTRL_A_REG, 1U);
     a86:	8f b5       	in	r24, 0x2f	; 47
     a88:	82 60       	ori	r24, 0x02	; 2
     a8a:	8f bd       	out	0x2f, r24	; 47
			CLEAR_BIT(*TIMER1_CTRL_B_REG, 3U);
     a8c:	8e b5       	in	r24, 0x2e	; 46
     a8e:	87 7f       	andi	r24, 0xF7	; 247
     a90:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(*TIMER1_CTRL_B_REG, 4U);
     a92:	8e b5       	in	r24, 0x2e	; 46
     a94:	80 61       	ori	r24, 0x10	; 16
     a96:	8e bd       	out	0x2e, r24	; 46
     a98:	ef 01       	movw	r28, r30
			break;
			default:
			break;
		}
		/* !Comment: Set TOP ticks in ICR1 Register */
		gu16TimerTopValue = (uint16)(F_CPU / (ConfigPtr->PrescaleValue * (1000.0 / ConfigPtr->PwmPeriod))) - 1U;
     a9a:	06 81       	ldd	r16, Z+6	; 0x06
     a9c:	17 81       	ldd	r17, Z+7	; 0x07
     a9e:	64 81       	ldd	r22, Z+4	; 0x04
     aa0:	75 81       	ldd	r23, Z+5	; 0x05
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 94 07 	call	0xf28	; 0xf28 <__floatunsisf>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	8a e7       	ldi	r24, 0x7A	; 122
     ab4:	94 e4       	ldi	r25, 0x44	; 68
     ab6:	0e 94 f3 06 	call	0xde6	; 0xde6 <__divsf3>
     aba:	6b 01       	movw	r12, r22
     abc:	7c 01       	movw	r14, r24
     abe:	b8 01       	movw	r22, r16
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 94 07 	call	0xf28	; 0xf28 <__floatunsisf>
     ac8:	a7 01       	movw	r20, r14
     aca:	96 01       	movw	r18, r12
     acc:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     ad0:	9b 01       	movw	r18, r22
     ad2:	ac 01       	movw	r20, r24
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	74 e2       	ldi	r23, 0x24	; 36
     ad8:	84 e7       	ldi	r24, 0x74	; 116
     ada:	9b e4       	ldi	r25, 0x4B	; 75
     adc:	0e 94 f3 06 	call	0xde6	; 0xde6 <__divsf3>
     ae0:	0e 94 65 07 	call	0xeca	; 0xeca <__fixunssfsi>
     ae4:	61 50       	subi	r22, 0x01	; 1
     ae6:	71 09       	sbc	r23, r1
     ae8:	70 93 b4 00 	sts	0x00B4, r23	; 0x8000b4 <gu16TimerTopValue+0x1>
     aec:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <gu16TimerTopValue>
		*(uint16*)TIMER1_INP_CAP_LOW_REG = (uint16)gu16TimerTopValue;
     af0:	77 bd       	out	0x27, r23	; 39
     af2:	66 bd       	out	0x26, r22	; 38
		
		switch(ConfigPtr->PwmPolarity)
     af4:	8a 81       	ldd	r24, Y+2	; 0x02
     af6:	80 32       	cpi	r24, 0x20	; 32
     af8:	61 f1       	breq	.+88     	; 0xb52 <Pwm_Init+0x180>
     afa:	80 33       	cpi	r24, 0x30	; 48
     afc:	09 f0       	breq	.+2      	; 0xb00 <Pwm_Init+0x12e>
     afe:	4d c0       	rjmp	.+154    	; 0xb9a <Pwm_Init+0x1c8>
		{
			case PWM_HIGH:
			SET_BIT(*TIMER1_CTRL_A_REG, 6U);
     b00:	8f b5       	in	r24, 0x2f	; 47
     b02:	80 64       	ori	r24, 0x40	; 64
     b04:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(*TIMER1_CTRL_A_REG, 7U);
     b06:	8f b5       	in	r24, 0x2f	; 47
     b08:	80 68       	ori	r24, 0x80	; 128
     b0a:	8f bd       	out	0x2f, r24	; 47
			*(uint16 *)TIMER1_CMP_A_LOW_REG = (uint16) (((100U - ConfigPtr->PwmDuty) / 100.0) * gu16TimerTopValue);
     b0c:	88 85       	ldd	r24, Y+8	; 0x08
     b0e:	99 85       	ldd	r25, Y+9	; 0x09
     b10:	64 e6       	ldi	r22, 0x64	; 100
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	68 1b       	sub	r22, r24
     b16:	79 0b       	sbc	r23, r25
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 94 07 	call	0xf28	; 0xf28 <__floatunsisf>
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	48 ec       	ldi	r20, 0xC8	; 200
     b26:	52 e4       	ldi	r21, 0x42	; 66
     b28:	0e 94 f3 06 	call	0xde6	; 0xde6 <__divsf3>
     b2c:	6b 01       	movw	r12, r22
     b2e:	7c 01       	movw	r14, r24
     b30:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <gu16TimerTopValue>
     b34:	70 91 b4 00 	lds	r23, 0x00B4	; 0x8000b4 <gu16TimerTopValue+0x1>
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 94 07 	call	0xf28	; 0xf28 <__floatunsisf>
     b40:	a7 01       	movw	r20, r14
     b42:	96 01       	movw	r18, r12
     b44:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     b48:	0e 94 65 07 	call	0xeca	; 0xeca <__fixunssfsi>
     b4c:	7b bd       	out	0x2b, r23	; 43
     b4e:	6a bd       	out	0x2a, r22	; 42
			break;
     b50:	24 c0       	rjmp	.+72     	; 0xb9a <Pwm_Init+0x1c8>
			case PWM_LOW:
			CLEAR_BIT(*TIMER1_CTRL_A_REG, 6U);
     b52:	8f b5       	in	r24, 0x2f	; 47
     b54:	8f 7b       	andi	r24, 0xBF	; 191
     b56:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(*TIMER1_CTRL_A_REG, 7U);
     b58:	8f b5       	in	r24, 0x2f	; 47
     b5a:	80 68       	ori	r24, 0x80	; 128
     b5c:	8f bd       	out	0x2f, r24	; 47
			*(uint16 *)TIMER1_CMP_A_LOW_REG = (uint16) ((ConfigPtr->PwmDuty / 100.0) * gu16TimerTopValue);
     b5e:	68 85       	ldd	r22, Y+8	; 0x08
     b60:	79 85       	ldd	r23, Y+9	; 0x09
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 94 07 	call	0xf28	; 0xf28 <__floatunsisf>
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	48 ec       	ldi	r20, 0xC8	; 200
     b70:	52 e4       	ldi	r21, 0x42	; 66
     b72:	0e 94 f3 06 	call	0xde6	; 0xde6 <__divsf3>
     b76:	6b 01       	movw	r12, r22
     b78:	7c 01       	movw	r14, r24
     b7a:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <gu16TimerTopValue>
     b7e:	70 91 b4 00 	lds	r23, 0x00B4	; 0x8000b4 <gu16TimerTopValue+0x1>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 94 07 	call	0xf28	; 0xf28 <__floatunsisf>
     b8a:	a7 01       	movw	r20, r14
     b8c:	96 01       	movw	r18, r12
     b8e:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     b92:	0e 94 65 07 	call	0xeca	; 0xeca <__fixunssfsi>
     b96:	7b bd       	out	0x2b, r23	; 43
     b98:	6a bd       	out	0x2a, r22	; 42
			break;
			default:
			break;
		}
		*TIMER1_CTRL_B_REG |= ConfigPtr->PwmClkDiv;
     b9a:	9e b5       	in	r25, 0x2e	; 46
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	89 2b       	or	r24, r25
     ba0:	8e bd       	out	0x2e, r24	; 46
		case PWM_CHANNEL_2:
		break;
		default:
		break;
	}	
}
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	08 95       	ret

00000bb4 <Pwm_SetDutyCycle>:
void Pwm_SetDutyCycle(Pwm_ChannelType ChannelNumber, uint16 DutyCycle)
{
     bb4:	cf 92       	push	r12
     bb6:	df 92       	push	r13
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
	switch(ChannelNumber)
     bbc:	88 23       	and	r24, r24
     bbe:	19 f0       	breq	.+6      	; 0xbc6 <Pwm_SetDutyCycle+0x12>
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	39 f1       	breq	.+78     	; 0xc12 <Pwm_SetDutyCycle+0x5e>
     bc4:	6c c0       	rjmp	.+216    	; 0xc9e <Pwm_SetDutyCycle+0xea>
	{
		case PWM_CHANNEL_0:
		switch(gStrPwm_Configuration->PwmPolarity)
     bc6:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <gStrPwm_Configuration+0x2>
     bca:	80 32       	cpi	r24, 0x20	; 32
     bcc:	a1 f0       	breq	.+40     	; 0xbf6 <Pwm_SetDutyCycle+0x42>
     bce:	80 33       	cpi	r24, 0x30	; 48
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <Pwm_SetDutyCycle+0x20>
     bd2:	65 c0       	rjmp	.+202    	; 0xc9e <Pwm_SetDutyCycle+0xea>
		{
			case PWM_HIGH:
			*TIMER0_CMP_REG = (uint8) (((100U - DutyCycle) / 100U) * PWM0_RESOLUTION);
     bd4:	24 e6       	ldi	r18, 0x64	; 100
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	26 1b       	sub	r18, r22
     bda:	37 0b       	sbc	r19, r23
     bdc:	36 95       	lsr	r19
     bde:	27 95       	ror	r18
     be0:	36 95       	lsr	r19
     be2:	27 95       	ror	r18
     be4:	ab e7       	ldi	r26, 0x7B	; 123
     be6:	b4 e1       	ldi	r27, 0x14	; 20
     be8:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__umulhisi3>
     bec:	96 95       	lsr	r25
     bee:	87 95       	ror	r24
     bf0:	81 95       	neg	r24
     bf2:	8c bf       	out	0x3c, r24	; 60
			break;
     bf4:	54 c0       	rjmp	.+168    	; 0xc9e <Pwm_SetDutyCycle+0xea>
			case PWM_LOW:
			*TIMER0_CMP_REG = (uint8) ((DutyCycle / 100U) * PWM0_RESOLUTION);
     bf6:	9b 01       	movw	r18, r22
     bf8:	36 95       	lsr	r19
     bfa:	27 95       	ror	r18
     bfc:	36 95       	lsr	r19
     bfe:	27 95       	ror	r18
     c00:	ab e7       	ldi	r26, 0x7B	; 123
     c02:	b4 e1       	ldi	r27, 0x14	; 20
     c04:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__umulhisi3>
     c08:	96 95       	lsr	r25
     c0a:	87 95       	ror	r24
     c0c:	81 95       	neg	r24
     c0e:	8c bf       	out	0x3c, r24	; 60
			break;
     c10:	46 c0       	rjmp	.+140    	; 0xc9e <Pwm_SetDutyCycle+0xea>
			default:
			break;
		}
		break;
		case PWM_CHANNEL_1:
		switch(gStrPwm_Configuration->PwmPolarity)
     c12:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <gStrPwm_Configuration+0x2>
     c16:	80 32       	cpi	r24, 0x20	; 32
     c18:	31 f1       	breq	.+76     	; 0xc66 <Pwm_SetDutyCycle+0xb2>
     c1a:	80 33       	cpi	r24, 0x30	; 48
     c1c:	09 f0       	breq	.+2      	; 0xc20 <Pwm_SetDutyCycle+0x6c>
     c1e:	3f c0       	rjmp	.+126    	; 0xc9e <Pwm_SetDutyCycle+0xea>
		{
			case PWM_HIGH:
			*(uint16 *)TIMER1_CMP_A_LOW_REG = (uint16) (((100U - DutyCycle) / 100.0) * gu16TimerTopValue);
     c20:	84 e6       	ldi	r24, 0x64	; 100
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	9c 01       	movw	r18, r24
     c26:	26 1b       	sub	r18, r22
     c28:	37 0b       	sbc	r19, r23
     c2a:	b9 01       	movw	r22, r18
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 94 07 	call	0xf28	; 0xf28 <__floatunsisf>
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	48 ec       	ldi	r20, 0xC8	; 200
     c3a:	52 e4       	ldi	r21, 0x42	; 66
     c3c:	0e 94 f3 06 	call	0xde6	; 0xde6 <__divsf3>
     c40:	6b 01       	movw	r12, r22
     c42:	7c 01       	movw	r14, r24
     c44:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <gu16TimerTopValue>
     c48:	70 91 b4 00 	lds	r23, 0x00B4	; 0x8000b4 <gu16TimerTopValue+0x1>
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 94 07 	call	0xf28	; 0xf28 <__floatunsisf>
     c54:	a7 01       	movw	r20, r14
     c56:	96 01       	movw	r18, r12
     c58:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     c5c:	0e 94 65 07 	call	0xeca	; 0xeca <__fixunssfsi>
     c60:	7b bd       	out	0x2b, r23	; 43
     c62:	6a bd       	out	0x2a, r22	; 42
			break;
     c64:	1c c0       	rjmp	.+56     	; 0xc9e <Pwm_SetDutyCycle+0xea>
			case PWM_LOW:
			*(uint16 *)TIMER1_CMP_A_LOW_REG = (uint16) ((DutyCycle / 100.0) * gu16TimerTopValue);
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 94 07 	call	0xf28	; 0xf28 <__floatunsisf>
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	48 ec       	ldi	r20, 0xC8	; 200
     c74:	52 e4       	ldi	r21, 0x42	; 66
     c76:	0e 94 f3 06 	call	0xde6	; 0xde6 <__divsf3>
     c7a:	6b 01       	movw	r12, r22
     c7c:	7c 01       	movw	r14, r24
     c7e:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <gu16TimerTopValue>
     c82:	70 91 b4 00 	lds	r23, 0x00B4	; 0x8000b4 <gu16TimerTopValue+0x1>
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 94 07 	call	0xf28	; 0xf28 <__floatunsisf>
     c8e:	a7 01       	movw	r20, r14
     c90:	96 01       	movw	r18, r12
     c92:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
     c96:	0e 94 65 07 	call	0xeca	; 0xeca <__fixunssfsi>
     c9a:	7b bd       	out	0x2b, r23	; 43
     c9c:	6a bd       	out	0x2a, r22	; 42
		case PWM_CHANNEL_2:
		break;
		default:
		break;
	}
}
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	cf 90       	pop	r12
     ca6:	08 95       	ret

00000ca8 <Timer0_Init>:
#include "gptConfig.h"
#include "Std_Types.h"
#include "Macros.h"
#include <avr/io.h>

void Timer0_Init(const Timer_Config *config){
     ca8:	fc 01       	movw	r30, r24
	TCNT0=0;
     caa:	12 be       	out	0x32, r1	; 50
	switch(config->mode){
     cac:	91 81       	ldd	r25, Z+1	; 0x01
     cae:	91 30       	cpi	r25, 0x01	; 1
     cb0:	a1 f0       	breq	.+40     	; 0xcda <Timer0_Init+0x32>
     cb2:	28 f0       	brcs	.+10     	; 0xcbe <Timer0_Init+0x16>
     cb4:	92 30       	cpi	r25, 0x02	; 2
     cb6:	c1 f0       	breq	.+48     	; 0xce8 <Timer0_Init+0x40>
     cb8:	93 30       	cpi	r25, 0x03	; 3
     cba:	41 f0       	breq	.+16     	; 0xccc <Timer0_Init+0x24>
     cbc:	1b c0       	rjmp	.+54     	; 0xcf4 <Timer0_Init+0x4c>
		case normal:
			CLEAR_BIT(TCCR0,WGM00);
     cbe:	83 b7       	in	r24, 0x33	; 51
     cc0:	8f 7b       	andi	r24, 0xBF	; 191
     cc2:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,WGM01);
     cc4:	83 b7       	in	r24, 0x33	; 51
     cc6:	87 7f       	andi	r24, 0xF7	; 247
     cc8:	83 bf       	out	0x33, r24	; 51
			break;
     cca:	14 c0       	rjmp	.+40     	; 0xcf4 <Timer0_Init+0x4c>
			case PhaseCorrect:
			SET_BIT(TCCR0,WGM00);
     ccc:	83 b7       	in	r24, 0x33	; 51
     cce:	80 64       	ori	r24, 0x40	; 64
     cd0:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,WGM01);
     cd2:	83 b7       	in	r24, 0x33	; 51
     cd4:	87 7f       	andi	r24, 0xF7	; 247
     cd6:	83 bf       	out	0x33, r24	; 51
			break;
     cd8:	0d c0       	rjmp	.+26     	; 0xcf4 <Timer0_Init+0x4c>
			case CTC:
			SET_BIT(TCCR0,WGM01);
     cda:	83 b7       	in	r24, 0x33	; 51
     cdc:	88 60       	ori	r24, 0x08	; 8
     cde:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,WGM00);
     ce0:	83 b7       	in	r24, 0x33	; 51
     ce2:	8f 7b       	andi	r24, 0xBF	; 191
     ce4:	83 bf       	out	0x33, r24	; 51
			break;
     ce6:	06 c0       	rjmp	.+12     	; 0xcf4 <Timer0_Init+0x4c>
			case FastPWM:
			SET_BIT(TCCR0,WGM00);
     ce8:	83 b7       	in	r24, 0x33	; 51
     cea:	80 64       	ori	r24, 0x40	; 64
     cec:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,WGM01);
     cee:	83 b7       	in	r24, 0x33	; 51
     cf0:	88 60       	ori	r24, 0x08	; 8
     cf2:	83 bf       	out	0x33, r24	; 51
			break;}
			switch(config->Prescale){
     cf4:	80 81       	ld	r24, Z
     cf6:	83 30       	cpi	r24, 0x03	; 3
     cf8:	f9 f0       	breq	.+62     	; 0xd38 <Timer0_Init+0x90>
     cfa:	28 f4       	brcc	.+10     	; 0xd06 <Timer0_Init+0x5e>
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	41 f0       	breq	.+16     	; 0xd10 <Timer0_Init+0x68>
     d00:	82 30       	cpi	r24, 0x02	; 2
     d02:	81 f0       	breq	.+32     	; 0xd24 <Timer0_Init+0x7c>
     d04:	08 95       	ret
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	09 f1       	breq	.+66     	; 0xd4c <Timer0_Init+0xa4>
     d0a:	85 30       	cpi	r24, 0x05	; 5
     d0c:	49 f1       	breq	.+82     	; 0xd60 <Timer0_Init+0xb8>
     d0e:	08 95       	ret
				case NoPreScaling:
				SET_BIT(TCCR0,CS00);
     d10:	83 b7       	in	r24, 0x33	; 51
     d12:	81 60       	ori	r24, 0x01	; 1
     d14:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS01);
     d16:	83 b7       	in	r24, 0x33	; 51
     d18:	8d 7f       	andi	r24, 0xFD	; 253
     d1a:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS02);
     d1c:	83 b7       	in	r24, 0x33	; 51
     d1e:	8b 7f       	andi	r24, 0xFB	; 251
     d20:	83 bf       	out	0x33, r24	; 51
				break;
     d22:	08 95       	ret
				case Eight_PreScaling:
				CLEAR_BIT(TCCR0,CS02);
     d24:	83 b7       	in	r24, 0x33	; 51
     d26:	8b 7f       	andi	r24, 0xFB	; 251
     d28:	83 bf       	out	0x33, r24	; 51
                SET_BIT(TCCR0,CS01);
     d2a:	83 b7       	in	r24, 0x33	; 51
     d2c:	82 60       	ori	r24, 0x02	; 2
     d2e:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS00);
     d30:	83 b7       	in	r24, 0x33	; 51
     d32:	8e 7f       	andi	r24, 0xFE	; 254
     d34:	83 bf       	out	0x33, r24	; 51
				break;
     d36:	08 95       	ret
				
				case PreScaling_64:
				CLEAR_BIT(TCCR0,CS02);
     d38:	83 b7       	in	r24, 0x33	; 51
     d3a:	8b 7f       	andi	r24, 0xFB	; 251
     d3c:	83 bf       	out	0x33, r24	; 51
				SET_BIT(TCCR0,CS01);
     d3e:	83 b7       	in	r24, 0x33	; 51
     d40:	82 60       	ori	r24, 0x02	; 2
     d42:	83 bf       	out	0x33, r24	; 51
				SET_BIT(TCCR0,CS00);
     d44:	83 b7       	in	r24, 0x33	; 51
     d46:	81 60       	ori	r24, 0x01	; 1
     d48:	83 bf       	out	0x33, r24	; 51
				break;
     d4a:	08 95       	ret
				
				case PreScaling_256:
				SET_BIT(TCCR0,CS02);
     d4c:	83 b7       	in	r24, 0x33	; 51
     d4e:	84 60       	ori	r24, 0x04	; 4
     d50:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS01);
     d52:	83 b7       	in	r24, 0x33	; 51
     d54:	8d 7f       	andi	r24, 0xFD	; 253
     d56:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS00);
     d58:	83 b7       	in	r24, 0x33	; 51
     d5a:	8e 7f       	andi	r24, 0xFE	; 254
     d5c:	83 bf       	out	0x33, r24	; 51
				break;
     d5e:	08 95       	ret
				case PreScaling_1024:
				SET_BIT(TCCR0,CS02);
     d60:	83 b7       	in	r24, 0x33	; 51
     d62:	84 60       	ori	r24, 0x04	; 4
     d64:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS01);
     d66:	83 b7       	in	r24, 0x33	; 51
     d68:	8d 7f       	andi	r24, 0xFD	; 253
     d6a:	83 bf       	out	0x33, r24	; 51
				SET_BIT(TCCR0,CS00);
     d6c:	83 b7       	in	r24, 0x33	; 51
     d6e:	81 60       	ori	r24, 0x01	; 1
     d70:	83 bf       	out	0x33, r24	; 51
     d72:	08 95       	ret

00000d74 <Timer0_Count>:
						}
			}
			static uint64 timer=0;
uint64 Timer0_Count(){
	
	if (TCNT0>=255)
     d74:	82 b7       	in	r24, 0x32	; 50
     d76:	8f 3f       	cpi	r24, 0xFF	; 255
     d78:	29 f5       	brne	.+74     	; 0xdc4 <Timer0_Count+0x50>
	{
		TCNT0=193;
     d7a:	81 ec       	ldi	r24, 0xC1	; 193
     d7c:	82 bf       	out	0x32, r24	; 50
		
		timer++;
     d7e:	20 91 b5 00 	lds	r18, 0x00B5	; 0x8000b5 <timer>
     d82:	30 91 b6 00 	lds	r19, 0x00B6	; 0x8000b6 <timer+0x1>
     d86:	40 91 b7 00 	lds	r20, 0x00B7	; 0x8000b7 <timer+0x2>
     d8a:	50 91 b8 00 	lds	r21, 0x00B8	; 0x8000b8 <timer+0x3>
     d8e:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <timer+0x4>
     d92:	70 91 ba 00 	lds	r23, 0x00BA	; 0x8000ba <timer+0x5>
     d96:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <timer+0x6>
     d9a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <timer+0x7>
     d9e:	a1 e0       	ldi	r26, 0x01	; 1
     da0:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__adddi3_s8>
     da4:	20 93 b5 00 	sts	0x00B5, r18	; 0x8000b5 <timer>
     da8:	30 93 b6 00 	sts	0x00B6, r19	; 0x8000b6 <timer+0x1>
     dac:	40 93 b7 00 	sts	0x00B7, r20	; 0x8000b7 <timer+0x2>
     db0:	50 93 b8 00 	sts	0x00B8, r21	; 0x8000b8 <timer+0x3>
     db4:	60 93 b9 00 	sts	0x00B9, r22	; 0x8000b9 <timer+0x4>
     db8:	70 93 ba 00 	sts	0x00BA, r23	; 0x8000ba <timer+0x5>
     dbc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <timer+0x6>
     dc0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <timer+0x7>
	}
	
	return timer;
     dc4:	20 91 b5 00 	lds	r18, 0x00B5	; 0x8000b5 <timer>
     dc8:	30 91 b6 00 	lds	r19, 0x00B6	; 0x8000b6 <timer+0x1>
     dcc:	40 91 b7 00 	lds	r20, 0x00B7	; 0x8000b7 <timer+0x2>
     dd0:	50 91 b8 00 	lds	r21, 0x00B8	; 0x8000b8 <timer+0x3>
     dd4:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <timer+0x4>
     dd8:	70 91 ba 00 	lds	r23, 0x00BA	; 0x8000ba <timer+0x5>
}
     ddc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <timer+0x6>
     de0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <timer+0x7>
     de4:	08 95       	ret

00000de6 <__divsf3>:
     de6:	0e 94 07 07 	call	0xe0e	; 0xe0e <__divsf3x>
     dea:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
     dee:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
     df2:	58 f0       	brcs	.+22     	; 0xe0a <__divsf3+0x24>
     df4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
     df8:	40 f0       	brcs	.+16     	; 0xe0a <__divsf3+0x24>
     dfa:	29 f4       	brne	.+10     	; 0xe06 <__divsf3+0x20>
     dfc:	5f 3f       	cpi	r21, 0xFF	; 255
     dfe:	29 f0       	breq	.+10     	; 0xe0a <__divsf3+0x24>
     e00:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_inf>
     e04:	51 11       	cpse	r21, r1
     e06:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
     e0a:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>

00000e0e <__divsf3x>:
     e0e:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
     e12:	68 f3       	brcs	.-38     	; 0xdee <__divsf3+0x8>

00000e14 <__divsf3_pse>:
     e14:	99 23       	and	r25, r25
     e16:	b1 f3       	breq	.-20     	; 0xe04 <__divsf3+0x1e>
     e18:	55 23       	and	r21, r21
     e1a:	91 f3       	breq	.-28     	; 0xe00 <__divsf3+0x1a>
     e1c:	95 1b       	sub	r25, r21
     e1e:	55 0b       	sbc	r21, r21
     e20:	bb 27       	eor	r27, r27
     e22:	aa 27       	eor	r26, r26
     e24:	62 17       	cp	r22, r18
     e26:	73 07       	cpc	r23, r19
     e28:	84 07       	cpc	r24, r20
     e2a:	38 f0       	brcs	.+14     	; 0xe3a <__divsf3_pse+0x26>
     e2c:	9f 5f       	subi	r25, 0xFF	; 255
     e2e:	5f 4f       	sbci	r21, 0xFF	; 255
     e30:	22 0f       	add	r18, r18
     e32:	33 1f       	adc	r19, r19
     e34:	44 1f       	adc	r20, r20
     e36:	aa 1f       	adc	r26, r26
     e38:	a9 f3       	breq	.-22     	; 0xe24 <__divsf3_pse+0x10>
     e3a:	35 d0       	rcall	.+106    	; 0xea6 <__divsf3_pse+0x92>
     e3c:	0e 2e       	mov	r0, r30
     e3e:	3a f0       	brmi	.+14     	; 0xe4e <__divsf3_pse+0x3a>
     e40:	e0 e8       	ldi	r30, 0x80	; 128
     e42:	32 d0       	rcall	.+100    	; 0xea8 <__divsf3_pse+0x94>
     e44:	91 50       	subi	r25, 0x01	; 1
     e46:	50 40       	sbci	r21, 0x00	; 0
     e48:	e6 95       	lsr	r30
     e4a:	00 1c       	adc	r0, r0
     e4c:	ca f7       	brpl	.-14     	; 0xe40 <__divsf3_pse+0x2c>
     e4e:	2b d0       	rcall	.+86     	; 0xea6 <__divsf3_pse+0x92>
     e50:	fe 2f       	mov	r31, r30
     e52:	29 d0       	rcall	.+82     	; 0xea6 <__divsf3_pse+0x92>
     e54:	66 0f       	add	r22, r22
     e56:	77 1f       	adc	r23, r23
     e58:	88 1f       	adc	r24, r24
     e5a:	bb 1f       	adc	r27, r27
     e5c:	26 17       	cp	r18, r22
     e5e:	37 07       	cpc	r19, r23
     e60:	48 07       	cpc	r20, r24
     e62:	ab 07       	cpc	r26, r27
     e64:	b0 e8       	ldi	r27, 0x80	; 128
     e66:	09 f0       	breq	.+2      	; 0xe6a <__divsf3_pse+0x56>
     e68:	bb 0b       	sbc	r27, r27
     e6a:	80 2d       	mov	r24, r0
     e6c:	bf 01       	movw	r22, r30
     e6e:	ff 27       	eor	r31, r31
     e70:	93 58       	subi	r25, 0x83	; 131
     e72:	5f 4f       	sbci	r21, 0xFF	; 255
     e74:	3a f0       	brmi	.+14     	; 0xe84 <__divsf3_pse+0x70>
     e76:	9e 3f       	cpi	r25, 0xFE	; 254
     e78:	51 05       	cpc	r21, r1
     e7a:	78 f0       	brcs	.+30     	; 0xe9a <__divsf3_pse+0x86>
     e7c:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_inf>
     e80:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
     e84:	5f 3f       	cpi	r21, 0xFF	; 255
     e86:	e4 f3       	brlt	.-8      	; 0xe80 <__divsf3_pse+0x6c>
     e88:	98 3e       	cpi	r25, 0xE8	; 232
     e8a:	d4 f3       	brlt	.-12     	; 0xe80 <__divsf3_pse+0x6c>
     e8c:	86 95       	lsr	r24
     e8e:	77 95       	ror	r23
     e90:	67 95       	ror	r22
     e92:	b7 95       	ror	r27
     e94:	f7 95       	ror	r31
     e96:	9f 5f       	subi	r25, 0xFF	; 255
     e98:	c9 f7       	brne	.-14     	; 0xe8c <__divsf3_pse+0x78>
     e9a:	88 0f       	add	r24, r24
     e9c:	91 1d       	adc	r25, r1
     e9e:	96 95       	lsr	r25
     ea0:	87 95       	ror	r24
     ea2:	97 f9       	bld	r25, 7
     ea4:	08 95       	ret
     ea6:	e1 e0       	ldi	r30, 0x01	; 1
     ea8:	66 0f       	add	r22, r22
     eaa:	77 1f       	adc	r23, r23
     eac:	88 1f       	adc	r24, r24
     eae:	bb 1f       	adc	r27, r27
     eb0:	62 17       	cp	r22, r18
     eb2:	73 07       	cpc	r23, r19
     eb4:	84 07       	cpc	r24, r20
     eb6:	ba 07       	cpc	r27, r26
     eb8:	20 f0       	brcs	.+8      	; 0xec2 <__divsf3_pse+0xae>
     eba:	62 1b       	sub	r22, r18
     ebc:	73 0b       	sbc	r23, r19
     ebe:	84 0b       	sbc	r24, r20
     ec0:	ba 0b       	sbc	r27, r26
     ec2:	ee 1f       	adc	r30, r30
     ec4:	88 f7       	brcc	.-30     	; 0xea8 <__divsf3_pse+0x94>
     ec6:	e0 95       	com	r30
     ec8:	08 95       	ret

00000eca <__fixunssfsi>:
     eca:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_splitA>
     ece:	88 f0       	brcs	.+34     	; 0xef2 <__fixunssfsi+0x28>
     ed0:	9f 57       	subi	r25, 0x7F	; 127
     ed2:	98 f0       	brcs	.+38     	; 0xefa <__fixunssfsi+0x30>
     ed4:	b9 2f       	mov	r27, r25
     ed6:	99 27       	eor	r25, r25
     ed8:	b7 51       	subi	r27, 0x17	; 23
     eda:	b0 f0       	brcs	.+44     	; 0xf08 <__fixunssfsi+0x3e>
     edc:	e1 f0       	breq	.+56     	; 0xf16 <__fixunssfsi+0x4c>
     ede:	66 0f       	add	r22, r22
     ee0:	77 1f       	adc	r23, r23
     ee2:	88 1f       	adc	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	1a f0       	brmi	.+6      	; 0xeee <__fixunssfsi+0x24>
     ee8:	ba 95       	dec	r27
     eea:	c9 f7       	brne	.-14     	; 0xede <__fixunssfsi+0x14>
     eec:	14 c0       	rjmp	.+40     	; 0xf16 <__fixunssfsi+0x4c>
     eee:	b1 30       	cpi	r27, 0x01	; 1
     ef0:	91 f0       	breq	.+36     	; 0xf16 <__fixunssfsi+0x4c>
     ef2:	0e 94 1b 08 	call	0x1036	; 0x1036 <__fp_zero>
     ef6:	b1 e0       	ldi	r27, 0x01	; 1
     ef8:	08 95       	ret
     efa:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__fp_zero>
     efe:	67 2f       	mov	r22, r23
     f00:	78 2f       	mov	r23, r24
     f02:	88 27       	eor	r24, r24
     f04:	b8 5f       	subi	r27, 0xF8	; 248
     f06:	39 f0       	breq	.+14     	; 0xf16 <__fixunssfsi+0x4c>
     f08:	b9 3f       	cpi	r27, 0xF9	; 249
     f0a:	cc f3       	brlt	.-14     	; 0xefe <__fixunssfsi+0x34>
     f0c:	86 95       	lsr	r24
     f0e:	77 95       	ror	r23
     f10:	67 95       	ror	r22
     f12:	b3 95       	inc	r27
     f14:	d9 f7       	brne	.-10     	; 0xf0c <__fixunssfsi+0x42>
     f16:	3e f4       	brtc	.+14     	; 0xf26 <__fixunssfsi+0x5c>
     f18:	90 95       	com	r25
     f1a:	80 95       	com	r24
     f1c:	70 95       	com	r23
     f1e:	61 95       	neg	r22
     f20:	7f 4f       	sbci	r23, 0xFF	; 255
     f22:	8f 4f       	sbci	r24, 0xFF	; 255
     f24:	9f 4f       	sbci	r25, 0xFF	; 255
     f26:	08 95       	ret

00000f28 <__floatunsisf>:
     f28:	e8 94       	clt
     f2a:	09 c0       	rjmp	.+18     	; 0xf3e <__floatsisf+0x12>

00000f2c <__floatsisf>:
     f2c:	97 fb       	bst	r25, 7
     f2e:	3e f4       	brtc	.+14     	; 0xf3e <__floatsisf+0x12>
     f30:	90 95       	com	r25
     f32:	80 95       	com	r24
     f34:	70 95       	com	r23
     f36:	61 95       	neg	r22
     f38:	7f 4f       	sbci	r23, 0xFF	; 255
     f3a:	8f 4f       	sbci	r24, 0xFF	; 255
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	99 23       	and	r25, r25
     f40:	a9 f0       	breq	.+42     	; 0xf6c <__floatsisf+0x40>
     f42:	f9 2f       	mov	r31, r25
     f44:	96 e9       	ldi	r25, 0x96	; 150
     f46:	bb 27       	eor	r27, r27
     f48:	93 95       	inc	r25
     f4a:	f6 95       	lsr	r31
     f4c:	87 95       	ror	r24
     f4e:	77 95       	ror	r23
     f50:	67 95       	ror	r22
     f52:	b7 95       	ror	r27
     f54:	f1 11       	cpse	r31, r1
     f56:	f8 cf       	rjmp	.-16     	; 0xf48 <__floatsisf+0x1c>
     f58:	fa f4       	brpl	.+62     	; 0xf98 <__floatsisf+0x6c>
     f5a:	bb 0f       	add	r27, r27
     f5c:	11 f4       	brne	.+4      	; 0xf62 <__floatsisf+0x36>
     f5e:	60 ff       	sbrs	r22, 0
     f60:	1b c0       	rjmp	.+54     	; 0xf98 <__floatsisf+0x6c>
     f62:	6f 5f       	subi	r22, 0xFF	; 255
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	8f 4f       	sbci	r24, 0xFF	; 255
     f68:	9f 4f       	sbci	r25, 0xFF	; 255
     f6a:	16 c0       	rjmp	.+44     	; 0xf98 <__floatsisf+0x6c>
     f6c:	88 23       	and	r24, r24
     f6e:	11 f0       	breq	.+4      	; 0xf74 <__floatsisf+0x48>
     f70:	96 e9       	ldi	r25, 0x96	; 150
     f72:	11 c0       	rjmp	.+34     	; 0xf96 <__floatsisf+0x6a>
     f74:	77 23       	and	r23, r23
     f76:	21 f0       	breq	.+8      	; 0xf80 <__floatsisf+0x54>
     f78:	9e e8       	ldi	r25, 0x8E	; 142
     f7a:	87 2f       	mov	r24, r23
     f7c:	76 2f       	mov	r23, r22
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <__floatsisf+0x5e>
     f80:	66 23       	and	r22, r22
     f82:	71 f0       	breq	.+28     	; 0xfa0 <__floatsisf+0x74>
     f84:	96 e8       	ldi	r25, 0x86	; 134
     f86:	86 2f       	mov	r24, r22
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	2a f0       	brmi	.+10     	; 0xf98 <__floatsisf+0x6c>
     f8e:	9a 95       	dec	r25
     f90:	66 0f       	add	r22, r22
     f92:	77 1f       	adc	r23, r23
     f94:	88 1f       	adc	r24, r24
     f96:	da f7       	brpl	.-10     	; 0xf8e <__floatsisf+0x62>
     f98:	88 0f       	add	r24, r24
     f9a:	96 95       	lsr	r25
     f9c:	87 95       	ror	r24
     f9e:	97 f9       	bld	r25, 7
     fa0:	08 95       	ret

00000fa2 <__fp_inf>:
     fa2:	97 f9       	bld	r25, 7
     fa4:	9f 67       	ori	r25, 0x7F	; 127
     fa6:	80 e8       	ldi	r24, 0x80	; 128
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	08 95       	ret

00000fae <__fp_nan>:
     fae:	9f ef       	ldi	r25, 0xFF	; 255
     fb0:	80 ec       	ldi	r24, 0xC0	; 192
     fb2:	08 95       	ret

00000fb4 <__fp_pscA>:
     fb4:	00 24       	eor	r0, r0
     fb6:	0a 94       	dec	r0
     fb8:	16 16       	cp	r1, r22
     fba:	17 06       	cpc	r1, r23
     fbc:	18 06       	cpc	r1, r24
     fbe:	09 06       	cpc	r0, r25
     fc0:	08 95       	ret

00000fc2 <__fp_pscB>:
     fc2:	00 24       	eor	r0, r0
     fc4:	0a 94       	dec	r0
     fc6:	12 16       	cp	r1, r18
     fc8:	13 06       	cpc	r1, r19
     fca:	14 06       	cpc	r1, r20
     fcc:	05 06       	cpc	r0, r21
     fce:	08 95       	ret

00000fd0 <__fp_round>:
     fd0:	09 2e       	mov	r0, r25
     fd2:	03 94       	inc	r0
     fd4:	00 0c       	add	r0, r0
     fd6:	11 f4       	brne	.+4      	; 0xfdc <__fp_round+0xc>
     fd8:	88 23       	and	r24, r24
     fda:	52 f0       	brmi	.+20     	; 0xff0 <__fp_round+0x20>
     fdc:	bb 0f       	add	r27, r27
     fde:	40 f4       	brcc	.+16     	; 0xff0 <__fp_round+0x20>
     fe0:	bf 2b       	or	r27, r31
     fe2:	11 f4       	brne	.+4      	; 0xfe8 <__fp_round+0x18>
     fe4:	60 ff       	sbrs	r22, 0
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <__fp_round+0x20>
     fe8:	6f 5f       	subi	r22, 0xFF	; 255
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	8f 4f       	sbci	r24, 0xFF	; 255
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	08 95       	ret

00000ff2 <__fp_split3>:
     ff2:	57 fd       	sbrc	r21, 7
     ff4:	90 58       	subi	r25, 0x80	; 128
     ff6:	44 0f       	add	r20, r20
     ff8:	55 1f       	adc	r21, r21
     ffa:	59 f0       	breq	.+22     	; 0x1012 <__fp_splitA+0x10>
     ffc:	5f 3f       	cpi	r21, 0xFF	; 255
     ffe:	71 f0       	breq	.+28     	; 0x101c <__fp_splitA+0x1a>
    1000:	47 95       	ror	r20

00001002 <__fp_splitA>:
    1002:	88 0f       	add	r24, r24
    1004:	97 fb       	bst	r25, 7
    1006:	99 1f       	adc	r25, r25
    1008:	61 f0       	breq	.+24     	; 0x1022 <__fp_splitA+0x20>
    100a:	9f 3f       	cpi	r25, 0xFF	; 255
    100c:	79 f0       	breq	.+30     	; 0x102c <__fp_splitA+0x2a>
    100e:	87 95       	ror	r24
    1010:	08 95       	ret
    1012:	12 16       	cp	r1, r18
    1014:	13 06       	cpc	r1, r19
    1016:	14 06       	cpc	r1, r20
    1018:	55 1f       	adc	r21, r21
    101a:	f2 cf       	rjmp	.-28     	; 0x1000 <__fp_split3+0xe>
    101c:	46 95       	lsr	r20
    101e:	f1 df       	rcall	.-30     	; 0x1002 <__fp_splitA>
    1020:	08 c0       	rjmp	.+16     	; 0x1032 <__fp_splitA+0x30>
    1022:	16 16       	cp	r1, r22
    1024:	17 06       	cpc	r1, r23
    1026:	18 06       	cpc	r1, r24
    1028:	99 1f       	adc	r25, r25
    102a:	f1 cf       	rjmp	.-30     	; 0x100e <__fp_splitA+0xc>
    102c:	86 95       	lsr	r24
    102e:	71 05       	cpc	r23, r1
    1030:	61 05       	cpc	r22, r1
    1032:	08 94       	sec
    1034:	08 95       	ret

00001036 <__fp_zero>:
    1036:	e8 94       	clt

00001038 <__fp_szero>:
    1038:	bb 27       	eor	r27, r27
    103a:	66 27       	eor	r22, r22
    103c:	77 27       	eor	r23, r23
    103e:	cb 01       	movw	r24, r22
    1040:	97 f9       	bld	r25, 7
    1042:	08 95       	ret

00001044 <__mulsf3>:
    1044:	0e 94 35 08 	call	0x106a	; 0x106a <__mulsf3x>
    1048:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
    104c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
    1050:	38 f0       	brcs	.+14     	; 0x1060 <__mulsf3+0x1c>
    1052:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
    1056:	20 f0       	brcs	.+8      	; 0x1060 <__mulsf3+0x1c>
    1058:	95 23       	and	r25, r21
    105a:	11 f0       	breq	.+4      	; 0x1060 <__mulsf3+0x1c>
    105c:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_inf>
    1060:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>
    1064:	11 24       	eor	r1, r1
    1066:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>

0000106a <__mulsf3x>:
    106a:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
    106e:	70 f3       	brcs	.-36     	; 0x104c <__mulsf3+0x8>

00001070 <__mulsf3_pse>:
    1070:	95 9f       	mul	r25, r21
    1072:	c1 f3       	breq	.-16     	; 0x1064 <__mulsf3+0x20>
    1074:	95 0f       	add	r25, r21
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	55 1f       	adc	r21, r21
    107a:	62 9f       	mul	r22, r18
    107c:	f0 01       	movw	r30, r0
    107e:	72 9f       	mul	r23, r18
    1080:	bb 27       	eor	r27, r27
    1082:	f0 0d       	add	r31, r0
    1084:	b1 1d       	adc	r27, r1
    1086:	63 9f       	mul	r22, r19
    1088:	aa 27       	eor	r26, r26
    108a:	f0 0d       	add	r31, r0
    108c:	b1 1d       	adc	r27, r1
    108e:	aa 1f       	adc	r26, r26
    1090:	64 9f       	mul	r22, r20
    1092:	66 27       	eor	r22, r22
    1094:	b0 0d       	add	r27, r0
    1096:	a1 1d       	adc	r26, r1
    1098:	66 1f       	adc	r22, r22
    109a:	82 9f       	mul	r24, r18
    109c:	22 27       	eor	r18, r18
    109e:	b0 0d       	add	r27, r0
    10a0:	a1 1d       	adc	r26, r1
    10a2:	62 1f       	adc	r22, r18
    10a4:	73 9f       	mul	r23, r19
    10a6:	b0 0d       	add	r27, r0
    10a8:	a1 1d       	adc	r26, r1
    10aa:	62 1f       	adc	r22, r18
    10ac:	83 9f       	mul	r24, r19
    10ae:	a0 0d       	add	r26, r0
    10b0:	61 1d       	adc	r22, r1
    10b2:	22 1f       	adc	r18, r18
    10b4:	74 9f       	mul	r23, r20
    10b6:	33 27       	eor	r19, r19
    10b8:	a0 0d       	add	r26, r0
    10ba:	61 1d       	adc	r22, r1
    10bc:	23 1f       	adc	r18, r19
    10be:	84 9f       	mul	r24, r20
    10c0:	60 0d       	add	r22, r0
    10c2:	21 1d       	adc	r18, r1
    10c4:	82 2f       	mov	r24, r18
    10c6:	76 2f       	mov	r23, r22
    10c8:	6a 2f       	mov	r22, r26
    10ca:	11 24       	eor	r1, r1
    10cc:	9f 57       	subi	r25, 0x7F	; 127
    10ce:	50 40       	sbci	r21, 0x00	; 0
    10d0:	9a f0       	brmi	.+38     	; 0x10f8 <__mulsf3_pse+0x88>
    10d2:	f1 f0       	breq	.+60     	; 0x1110 <__mulsf3_pse+0xa0>
    10d4:	88 23       	and	r24, r24
    10d6:	4a f0       	brmi	.+18     	; 0x10ea <__mulsf3_pse+0x7a>
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	bb 1f       	adc	r27, r27
    10de:	66 1f       	adc	r22, r22
    10e0:	77 1f       	adc	r23, r23
    10e2:	88 1f       	adc	r24, r24
    10e4:	91 50       	subi	r25, 0x01	; 1
    10e6:	50 40       	sbci	r21, 0x00	; 0
    10e8:	a9 f7       	brne	.-22     	; 0x10d4 <__mulsf3_pse+0x64>
    10ea:	9e 3f       	cpi	r25, 0xFE	; 254
    10ec:	51 05       	cpc	r21, r1
    10ee:	80 f0       	brcs	.+32     	; 0x1110 <__mulsf3_pse+0xa0>
    10f0:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_inf>
    10f4:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
    10f8:	5f 3f       	cpi	r21, 0xFF	; 255
    10fa:	e4 f3       	brlt	.-8      	; 0x10f4 <__mulsf3_pse+0x84>
    10fc:	98 3e       	cpi	r25, 0xE8	; 232
    10fe:	d4 f3       	brlt	.-12     	; 0x10f4 <__mulsf3_pse+0x84>
    1100:	86 95       	lsr	r24
    1102:	77 95       	ror	r23
    1104:	67 95       	ror	r22
    1106:	b7 95       	ror	r27
    1108:	f7 95       	ror	r31
    110a:	e7 95       	ror	r30
    110c:	9f 5f       	subi	r25, 0xFF	; 255
    110e:	c1 f7       	brne	.-16     	; 0x1100 <__mulsf3_pse+0x90>
    1110:	fe 2b       	or	r31, r30
    1112:	88 0f       	add	r24, r24
    1114:	91 1d       	adc	r25, r1
    1116:	96 95       	lsr	r25
    1118:	87 95       	ror	r24
    111a:	97 f9       	bld	r25, 7
    111c:	08 95       	ret

0000111e <pow>:
    111e:	fa 01       	movw	r30, r20
    1120:	ee 0f       	add	r30, r30
    1122:	ff 1f       	adc	r31, r31
    1124:	30 96       	adiw	r30, 0x00	; 0
    1126:	21 05       	cpc	r18, r1
    1128:	31 05       	cpc	r19, r1
    112a:	a1 f1       	breq	.+104    	; 0x1194 <pow+0x76>
    112c:	61 15       	cp	r22, r1
    112e:	71 05       	cpc	r23, r1
    1130:	61 f4       	brne	.+24     	; 0x114a <pow+0x2c>
    1132:	80 38       	cpi	r24, 0x80	; 128
    1134:	bf e3       	ldi	r27, 0x3F	; 63
    1136:	9b 07       	cpc	r25, r27
    1138:	49 f1       	breq	.+82     	; 0x118c <pow+0x6e>
    113a:	68 94       	set
    113c:	90 38       	cpi	r25, 0x80	; 128
    113e:	81 05       	cpc	r24, r1
    1140:	61 f0       	breq	.+24     	; 0x115a <pow+0x3c>
    1142:	80 38       	cpi	r24, 0x80	; 128
    1144:	bf ef       	ldi	r27, 0xFF	; 255
    1146:	9b 07       	cpc	r25, r27
    1148:	41 f0       	breq	.+16     	; 0x115a <pow+0x3c>
    114a:	99 23       	and	r25, r25
    114c:	4a f5       	brpl	.+82     	; 0x11a0 <pow+0x82>
    114e:	ff 3f       	cpi	r31, 0xFF	; 255
    1150:	e1 05       	cpc	r30, r1
    1152:	31 05       	cpc	r19, r1
    1154:	21 05       	cpc	r18, r1
    1156:	19 f1       	breq	.+70     	; 0x119e <pow+0x80>
    1158:	e8 94       	clt
    115a:	08 94       	sec
    115c:	e7 95       	ror	r30
    115e:	d9 01       	movw	r26, r18
    1160:	aa 23       	and	r26, r26
    1162:	29 f4       	brne	.+10     	; 0x116e <pow+0x50>
    1164:	ab 2f       	mov	r26, r27
    1166:	be 2f       	mov	r27, r30
    1168:	f8 5f       	subi	r31, 0xF8	; 248
    116a:	d0 f3       	brcs	.-12     	; 0x1160 <pow+0x42>
    116c:	10 c0       	rjmp	.+32     	; 0x118e <pow+0x70>
    116e:	ff 5f       	subi	r31, 0xFF	; 255
    1170:	70 f4       	brcc	.+28     	; 0x118e <pow+0x70>
    1172:	a6 95       	lsr	r26
    1174:	e0 f7       	brcc	.-8      	; 0x116e <pow+0x50>
    1176:	f7 39       	cpi	r31, 0x97	; 151
    1178:	50 f0       	brcs	.+20     	; 0x118e <pow+0x70>
    117a:	19 f0       	breq	.+6      	; 0x1182 <pow+0x64>
    117c:	ff 3a       	cpi	r31, 0xAF	; 175
    117e:	38 f4       	brcc	.+14     	; 0x118e <pow+0x70>
    1180:	9f 77       	andi	r25, 0x7F	; 127
    1182:	9f 93       	push	r25
    1184:	0d d0       	rcall	.+26     	; 0x11a0 <pow+0x82>
    1186:	0f 90       	pop	r0
    1188:	07 fc       	sbrc	r0, 7
    118a:	90 58       	subi	r25, 0x80	; 128
    118c:	08 95       	ret
    118e:	46 f0       	brts	.+16     	; 0x11a0 <pow+0x82>
    1190:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	80 e8       	ldi	r24, 0x80	; 128
    119a:	9f e3       	ldi	r25, 0x3F	; 63
    119c:	08 95       	ret
    119e:	4f e7       	ldi	r20, 0x7F	; 127
    11a0:	9f 77       	andi	r25, 0x7F	; 127
    11a2:	5f 93       	push	r21
    11a4:	4f 93       	push	r20
    11a6:	3f 93       	push	r19
    11a8:	2f 93       	push	r18
    11aa:	0e 94 8a 09 	call	0x1314	; 0x1314 <log>
    11ae:	2f 91       	pop	r18
    11b0:	3f 91       	pop	r19
    11b2:	4f 91       	pop	r20
    11b4:	5f 91       	pop	r21
    11b6:	0e 94 22 08 	call	0x1044	; 0x1044 <__mulsf3>
    11ba:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <exp>
    11be:	29 f4       	brne	.+10     	; 0x11ca <pow+0xac>
    11c0:	16 f0       	brts	.+4      	; 0x11c6 <pow+0xa8>
    11c2:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_inf>
    11c6:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__fp_zero>
    11ca:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>

000011ce <exp>:
    11ce:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_splitA>
    11d2:	a8 f3       	brcs	.-22     	; 0x11be <pow+0xa0>
    11d4:	96 38       	cpi	r25, 0x86	; 134
    11d6:	a0 f7       	brcc	.-24     	; 0x11c0 <pow+0xa2>
    11d8:	07 f8       	bld	r0, 7
    11da:	0f 92       	push	r0
    11dc:	e8 94       	clt
    11de:	2b e3       	ldi	r18, 0x3B	; 59
    11e0:	3a ea       	ldi	r19, 0xAA	; 170
    11e2:	48 eb       	ldi	r20, 0xB8	; 184
    11e4:	5f e7       	ldi	r21, 0x7F	; 127
    11e6:	0e 94 38 08 	call	0x1070	; 0x1070 <__mulsf3_pse>
    11ea:	0f 92       	push	r0
    11ec:	0f 92       	push	r0
    11ee:	0f 92       	push	r0
    11f0:	4d b7       	in	r20, 0x3d	; 61
    11f2:	5e b7       	in	r21, 0x3e	; 62
    11f4:	0f 92       	push	r0
    11f6:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <modf>
    11fa:	e4 e5       	ldi	r30, 0x54	; 84
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	0e 94 19 09 	call	0x1232	; 0x1232 <__fp_powser>
    1202:	4f 91       	pop	r20
    1204:	5f 91       	pop	r21
    1206:	ef 91       	pop	r30
    1208:	ff 91       	pop	r31
    120a:	e5 95       	asr	r30
    120c:	ee 1f       	adc	r30, r30
    120e:	ff 1f       	adc	r31, r31
    1210:	49 f0       	breq	.+18     	; 0x1224 <exp+0x56>
    1212:	fe 57       	subi	r31, 0x7E	; 126
    1214:	e0 68       	ori	r30, 0x80	; 128
    1216:	44 27       	eor	r20, r20
    1218:	ee 0f       	add	r30, r30
    121a:	44 1f       	adc	r20, r20
    121c:	fa 95       	dec	r31
    121e:	e1 f7       	brne	.-8      	; 0x1218 <exp+0x4a>
    1220:	41 95       	neg	r20
    1222:	55 0b       	sbc	r21, r21
    1224:	0e 94 4c 09 	call	0x1298	; 0x1298 <ldexp>
    1228:	0f 90       	pop	r0
    122a:	07 fe       	sbrs	r0, 7
    122c:	0c 94 40 09 	jmp	0x1280	; 0x1280 <inverse>
    1230:	08 95       	ret

00001232 <__fp_powser>:
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	1f 93       	push	r17
    1238:	0f 93       	push	r16
    123a:	ff 92       	push	r15
    123c:	ef 92       	push	r14
    123e:	df 92       	push	r13
    1240:	7b 01       	movw	r14, r22
    1242:	8c 01       	movw	r16, r24
    1244:	68 94       	set
    1246:	06 c0       	rjmp	.+12     	; 0x1254 <__fp_powser+0x22>
    1248:	da 2e       	mov	r13, r26
    124a:	ef 01       	movw	r28, r30
    124c:	0e 94 35 08 	call	0x106a	; 0x106a <__mulsf3x>
    1250:	fe 01       	movw	r30, r28
    1252:	e8 94       	clt
    1254:	a5 91       	lpm	r26, Z+
    1256:	25 91       	lpm	r18, Z+
    1258:	35 91       	lpm	r19, Z+
    125a:	45 91       	lpm	r20, Z+
    125c:	55 91       	lpm	r21, Z+
    125e:	a6 f3       	brts	.-24     	; 0x1248 <__fp_powser+0x16>
    1260:	ef 01       	movw	r28, r30
    1262:	0e 94 1e 0a 	call	0x143c	; 0x143c <__addsf3x>
    1266:	fe 01       	movw	r30, r28
    1268:	97 01       	movw	r18, r14
    126a:	a8 01       	movw	r20, r16
    126c:	da 94       	dec	r13
    126e:	69 f7       	brne	.-38     	; 0x124a <__fp_powser+0x18>
    1270:	df 90       	pop	r13
    1272:	ef 90       	pop	r14
    1274:	ff 90       	pop	r15
    1276:	0f 91       	pop	r16
    1278:	1f 91       	pop	r17
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <inverse>:
    1280:	9b 01       	movw	r18, r22
    1282:	ac 01       	movw	r20, r24
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	80 e8       	ldi	r24, 0x80	; 128
    128a:	9f e3       	ldi	r25, 0x3F	; 63
    128c:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__divsf3>
    1290:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_inf>
    1294:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__fp_mpack>

00001298 <ldexp>:
    1298:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_splitA>
    129c:	d8 f3       	brcs	.-10     	; 0x1294 <inverse+0x14>
    129e:	99 23       	and	r25, r25
    12a0:	c9 f3       	breq	.-14     	; 0x1294 <inverse+0x14>
    12a2:	94 0f       	add	r25, r20
    12a4:	51 1d       	adc	r21, r1
    12a6:	a3 f3       	brvs	.-24     	; 0x1290 <inverse+0x10>
    12a8:	91 50       	subi	r25, 0x01	; 1
    12aa:	50 40       	sbci	r21, 0x00	; 0
    12ac:	94 f0       	brlt	.+36     	; 0x12d2 <ldexp+0x3a>
    12ae:	59 f0       	breq	.+22     	; 0x12c6 <ldexp+0x2e>
    12b0:	88 23       	and	r24, r24
    12b2:	32 f0       	brmi	.+12     	; 0x12c0 <ldexp+0x28>
    12b4:	66 0f       	add	r22, r22
    12b6:	77 1f       	adc	r23, r23
    12b8:	88 1f       	adc	r24, r24
    12ba:	91 50       	subi	r25, 0x01	; 1
    12bc:	50 40       	sbci	r21, 0x00	; 0
    12be:	c1 f7       	brne	.-16     	; 0x12b0 <ldexp+0x18>
    12c0:	9e 3f       	cpi	r25, 0xFE	; 254
    12c2:	51 05       	cpc	r21, r1
    12c4:	2c f7       	brge	.-54     	; 0x1290 <inverse+0x10>
    12c6:	88 0f       	add	r24, r24
    12c8:	91 1d       	adc	r25, r1
    12ca:	96 95       	lsr	r25
    12cc:	87 95       	ror	r24
    12ce:	97 f9       	bld	r25, 7
    12d0:	08 95       	ret
    12d2:	5f 3f       	cpi	r21, 0xFF	; 255
    12d4:	ac f0       	brlt	.+42     	; 0x1300 <ldexp+0x68>
    12d6:	98 3e       	cpi	r25, 0xE8	; 232
    12d8:	9c f0       	brlt	.+38     	; 0x1300 <ldexp+0x68>
    12da:	bb 27       	eor	r27, r27
    12dc:	86 95       	lsr	r24
    12de:	77 95       	ror	r23
    12e0:	67 95       	ror	r22
    12e2:	b7 95       	ror	r27
    12e4:	08 f4       	brcc	.+2      	; 0x12e8 <ldexp+0x50>
    12e6:	b1 60       	ori	r27, 0x01	; 1
    12e8:	93 95       	inc	r25
    12ea:	c1 f7       	brne	.-16     	; 0x12dc <ldexp+0x44>
    12ec:	bb 0f       	add	r27, r27
    12ee:	58 f7       	brcc	.-42     	; 0x12c6 <ldexp+0x2e>
    12f0:	11 f4       	brne	.+4      	; 0x12f6 <ldexp+0x5e>
    12f2:	60 ff       	sbrs	r22, 0
    12f4:	e8 cf       	rjmp	.-48     	; 0x12c6 <ldexp+0x2e>
    12f6:	6f 5f       	subi	r22, 0xFF	; 255
    12f8:	7f 4f       	sbci	r23, 0xFF	; 255
    12fa:	8f 4f       	sbci	r24, 0xFF	; 255
    12fc:	9f 4f       	sbci	r25, 0xFF	; 255
    12fe:	e3 cf       	rjmp	.-58     	; 0x12c6 <ldexp+0x2e>
    1300:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
    1304:	16 f0       	brts	.+4      	; 0x130a <ldexp+0x72>
    1306:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__fp_mpack>
    130a:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>
    130e:	68 94       	set
    1310:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_inf>

00001314 <log>:
    1314:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_splitA>
    1318:	a8 f3       	brcs	.-22     	; 0x1304 <ldexp+0x6c>
    131a:	99 23       	and	r25, r25
    131c:	c1 f3       	breq	.-16     	; 0x130e <ldexp+0x76>
    131e:	ae f3       	brts	.-22     	; 0x130a <ldexp+0x72>
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	1f 93       	push	r17
    1326:	0f 93       	push	r16
    1328:	ff 92       	push	r15
    132a:	c9 2f       	mov	r28, r25
    132c:	dd 27       	eor	r29, r29
    132e:	88 23       	and	r24, r24
    1330:	2a f0       	brmi	.+10     	; 0x133c <log+0x28>
    1332:	21 97       	sbiw	r28, 0x01	; 1
    1334:	66 0f       	add	r22, r22
    1336:	77 1f       	adc	r23, r23
    1338:	88 1f       	adc	r24, r24
    133a:	da f7       	brpl	.-10     	; 0x1332 <log+0x1e>
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e8       	ldi	r20, 0x80	; 128
    1342:	5f eb       	ldi	r21, 0xBF	; 191
    1344:	9f e3       	ldi	r25, 0x3F	; 63
    1346:	88 39       	cpi	r24, 0x98	; 152
    1348:	20 f0       	brcs	.+8      	; 0x1352 <log+0x3e>
    134a:	80 3e       	cpi	r24, 0xE0	; 224
    134c:	38 f0       	brcs	.+14     	; 0x135c <log+0x48>
    134e:	21 96       	adiw	r28, 0x01	; 1
    1350:	8f 77       	andi	r24, 0x7F	; 127
    1352:	0e 94 07 0a 	call	0x140e	; 0x140e <__addsf3>
    1356:	ec e7       	ldi	r30, 0x7C	; 124
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	04 c0       	rjmp	.+8      	; 0x1364 <log+0x50>
    135c:	0e 94 07 0a 	call	0x140e	; 0x140e <__addsf3>
    1360:	e9 ea       	ldi	r30, 0xA9	; 169
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	0e 94 19 09 	call	0x1232	; 0x1232 <__fp_powser>
    1368:	8b 01       	movw	r16, r22
    136a:	be 01       	movw	r22, r28
    136c:	ec 01       	movw	r28, r24
    136e:	fb 2e       	mov	r15, r27
    1370:	6f 57       	subi	r22, 0x7F	; 127
    1372:	71 09       	sbc	r23, r1
    1374:	75 95       	asr	r23
    1376:	77 1f       	adc	r23, r23
    1378:	88 0b       	sbc	r24, r24
    137a:	99 0b       	sbc	r25, r25
    137c:	0e 94 96 07 	call	0xf2c	; 0xf2c <__floatsisf>
    1380:	28 e1       	ldi	r18, 0x18	; 24
    1382:	32 e7       	ldi	r19, 0x72	; 114
    1384:	41 e3       	ldi	r20, 0x31	; 49
    1386:	5f e3       	ldi	r21, 0x3F	; 63
    1388:	0e 94 35 08 	call	0x106a	; 0x106a <__mulsf3x>
    138c:	af 2d       	mov	r26, r15
    138e:	98 01       	movw	r18, r16
    1390:	ae 01       	movw	r20, r28
    1392:	ff 90       	pop	r15
    1394:	0f 91       	pop	r16
    1396:	1f 91       	pop	r17
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	0e 94 1e 0a 	call	0x143c	; 0x143c <__addsf3x>
    13a0:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>

000013a4 <modf>:
    13a4:	fa 01       	movw	r30, r20
    13a6:	dc 01       	movw	r26, r24
    13a8:	aa 0f       	add	r26, r26
    13aa:	bb 1f       	adc	r27, r27
    13ac:	9b 01       	movw	r18, r22
    13ae:	ac 01       	movw	r20, r24
    13b0:	bf 57       	subi	r27, 0x7F	; 127
    13b2:	28 f4       	brcc	.+10     	; 0x13be <modf+0x1a>
    13b4:	22 27       	eor	r18, r18
    13b6:	33 27       	eor	r19, r19
    13b8:	44 27       	eor	r20, r20
    13ba:	50 78       	andi	r21, 0x80	; 128
    13bc:	20 c0       	rjmp	.+64     	; 0x13fe <modf+0x5a>
    13be:	b7 51       	subi	r27, 0x17	; 23
    13c0:	90 f4       	brcc	.+36     	; 0x13e6 <modf+0x42>
    13c2:	ab 2f       	mov	r26, r27
    13c4:	00 24       	eor	r0, r0
    13c6:	46 95       	lsr	r20
    13c8:	37 95       	ror	r19
    13ca:	27 95       	ror	r18
    13cc:	01 1c       	adc	r0, r1
    13ce:	a3 95       	inc	r26
    13d0:	d2 f3       	brmi	.-12     	; 0x13c6 <modf+0x22>
    13d2:	00 20       	and	r0, r0
    13d4:	71 f0       	breq	.+28     	; 0x13f2 <modf+0x4e>
    13d6:	22 0f       	add	r18, r18
    13d8:	33 1f       	adc	r19, r19
    13da:	44 1f       	adc	r20, r20
    13dc:	b3 95       	inc	r27
    13de:	da f3       	brmi	.-10     	; 0x13d6 <modf+0x32>
    13e0:	0e d0       	rcall	.+28     	; 0x13fe <modf+0x5a>
    13e2:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__subsf3>
    13e6:	61 30       	cpi	r22, 0x01	; 1
    13e8:	71 05       	cpc	r23, r1
    13ea:	a0 e8       	ldi	r26, 0x80	; 128
    13ec:	8a 07       	cpc	r24, r26
    13ee:	b9 46       	sbci	r27, 0x69	; 105
    13f0:	30 f4       	brcc	.+12     	; 0x13fe <modf+0x5a>
    13f2:	9b 01       	movw	r18, r22
    13f4:	ac 01       	movw	r20, r24
    13f6:	66 27       	eor	r22, r22
    13f8:	77 27       	eor	r23, r23
    13fa:	88 27       	eor	r24, r24
    13fc:	90 78       	andi	r25, 0x80	; 128
    13fe:	30 96       	adiw	r30, 0x00	; 0
    1400:	21 f0       	breq	.+8      	; 0x140a <modf+0x66>
    1402:	20 83       	st	Z, r18
    1404:	31 83       	std	Z+1, r19	; 0x01
    1406:	42 83       	std	Z+2, r20	; 0x02
    1408:	53 83       	std	Z+3, r21	; 0x03
    140a:	08 95       	ret

0000140c <__subsf3>:
    140c:	50 58       	subi	r21, 0x80	; 128

0000140e <__addsf3>:
    140e:	bb 27       	eor	r27, r27
    1410:	aa 27       	eor	r26, r26
    1412:	0e 94 1e 0a 	call	0x143c	; 0x143c <__addsf3x>
    1416:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
    141a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
    141e:	38 f0       	brcs	.+14     	; 0x142e <__addsf3+0x20>
    1420:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
    1424:	20 f0       	brcs	.+8      	; 0x142e <__addsf3+0x20>
    1426:	39 f4       	brne	.+14     	; 0x1436 <__addsf3+0x28>
    1428:	9f 3f       	cpi	r25, 0xFF	; 255
    142a:	19 f4       	brne	.+6      	; 0x1432 <__addsf3+0x24>
    142c:	26 f4       	brtc	.+8      	; 0x1436 <__addsf3+0x28>
    142e:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>
    1432:	0e f4       	brtc	.+2      	; 0x1436 <__addsf3+0x28>
    1434:	e0 95       	com	r30
    1436:	e7 fb       	bst	r30, 7
    1438:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_inf>

0000143c <__addsf3x>:
    143c:	e9 2f       	mov	r30, r25
    143e:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
    1442:	58 f3       	brcs	.-42     	; 0x141a <__addsf3+0xc>
    1444:	ba 17       	cp	r27, r26
    1446:	62 07       	cpc	r22, r18
    1448:	73 07       	cpc	r23, r19
    144a:	84 07       	cpc	r24, r20
    144c:	95 07       	cpc	r25, r21
    144e:	20 f0       	brcs	.+8      	; 0x1458 <__addsf3x+0x1c>
    1450:	79 f4       	brne	.+30     	; 0x1470 <__addsf3x+0x34>
    1452:	a6 f5       	brtc	.+104    	; 0x14bc <__addsf3x+0x80>
    1454:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__fp_zero>
    1458:	0e f4       	brtc	.+2      	; 0x145c <__addsf3x+0x20>
    145a:	e0 95       	com	r30
    145c:	0b 2e       	mov	r0, r27
    145e:	ba 2f       	mov	r27, r26
    1460:	a0 2d       	mov	r26, r0
    1462:	0b 01       	movw	r0, r22
    1464:	b9 01       	movw	r22, r18
    1466:	90 01       	movw	r18, r0
    1468:	0c 01       	movw	r0, r24
    146a:	ca 01       	movw	r24, r20
    146c:	a0 01       	movw	r20, r0
    146e:	11 24       	eor	r1, r1
    1470:	ff 27       	eor	r31, r31
    1472:	59 1b       	sub	r21, r25
    1474:	99 f0       	breq	.+38     	; 0x149c <__addsf3x+0x60>
    1476:	59 3f       	cpi	r21, 0xF9	; 249
    1478:	50 f4       	brcc	.+20     	; 0x148e <__addsf3x+0x52>
    147a:	50 3e       	cpi	r21, 0xE0	; 224
    147c:	68 f1       	brcs	.+90     	; 0x14d8 <__addsf3x+0x9c>
    147e:	1a 16       	cp	r1, r26
    1480:	f0 40       	sbci	r31, 0x00	; 0
    1482:	a2 2f       	mov	r26, r18
    1484:	23 2f       	mov	r18, r19
    1486:	34 2f       	mov	r19, r20
    1488:	44 27       	eor	r20, r20
    148a:	58 5f       	subi	r21, 0xF8	; 248
    148c:	f3 cf       	rjmp	.-26     	; 0x1474 <__addsf3x+0x38>
    148e:	46 95       	lsr	r20
    1490:	37 95       	ror	r19
    1492:	27 95       	ror	r18
    1494:	a7 95       	ror	r26
    1496:	f0 40       	sbci	r31, 0x00	; 0
    1498:	53 95       	inc	r21
    149a:	c9 f7       	brne	.-14     	; 0x148e <__addsf3x+0x52>
    149c:	7e f4       	brtc	.+30     	; 0x14bc <__addsf3x+0x80>
    149e:	1f 16       	cp	r1, r31
    14a0:	ba 0b       	sbc	r27, r26
    14a2:	62 0b       	sbc	r22, r18
    14a4:	73 0b       	sbc	r23, r19
    14a6:	84 0b       	sbc	r24, r20
    14a8:	ba f0       	brmi	.+46     	; 0x14d8 <__addsf3x+0x9c>
    14aa:	91 50       	subi	r25, 0x01	; 1
    14ac:	a1 f0       	breq	.+40     	; 0x14d6 <__addsf3x+0x9a>
    14ae:	ff 0f       	add	r31, r31
    14b0:	bb 1f       	adc	r27, r27
    14b2:	66 1f       	adc	r22, r22
    14b4:	77 1f       	adc	r23, r23
    14b6:	88 1f       	adc	r24, r24
    14b8:	c2 f7       	brpl	.-16     	; 0x14aa <__addsf3x+0x6e>
    14ba:	0e c0       	rjmp	.+28     	; 0x14d8 <__addsf3x+0x9c>
    14bc:	ba 0f       	add	r27, r26
    14be:	62 1f       	adc	r22, r18
    14c0:	73 1f       	adc	r23, r19
    14c2:	84 1f       	adc	r24, r20
    14c4:	48 f4       	brcc	.+18     	; 0x14d8 <__addsf3x+0x9c>
    14c6:	87 95       	ror	r24
    14c8:	77 95       	ror	r23
    14ca:	67 95       	ror	r22
    14cc:	b7 95       	ror	r27
    14ce:	f7 95       	ror	r31
    14d0:	9e 3f       	cpi	r25, 0xFE	; 254
    14d2:	08 f0       	brcs	.+2      	; 0x14d6 <__addsf3x+0x9a>
    14d4:	b0 cf       	rjmp	.-160    	; 0x1436 <__addsf3+0x28>
    14d6:	93 95       	inc	r25
    14d8:	88 0f       	add	r24, r24
    14da:	08 f0       	brcs	.+2      	; 0x14de <__addsf3x+0xa2>
    14dc:	99 27       	eor	r25, r25
    14de:	ee 0f       	add	r30, r30
    14e0:	97 95       	ror	r25
    14e2:	87 95       	ror	r24
    14e4:	08 95       	ret

000014e6 <__fp_mpack>:
    14e6:	9f 3f       	cpi	r25, 0xFF	; 255
    14e8:	31 f0       	breq	.+12     	; 0x14f6 <__fp_mpack_finite+0xc>

000014ea <__fp_mpack_finite>:
    14ea:	91 50       	subi	r25, 0x01	; 1
    14ec:	20 f4       	brcc	.+8      	; 0x14f6 <__fp_mpack_finite+0xc>
    14ee:	87 95       	ror	r24
    14f0:	77 95       	ror	r23
    14f2:	67 95       	ror	r22
    14f4:	b7 95       	ror	r27
    14f6:	88 0f       	add	r24, r24
    14f8:	91 1d       	adc	r25, r1
    14fa:	96 95       	lsr	r25
    14fc:	87 95       	ror	r24
    14fe:	97 f9       	bld	r25, 7
    1500:	08 95       	ret

00001502 <__udivmodsi4>:
    1502:	a1 e2       	ldi	r26, 0x21	; 33
    1504:	1a 2e       	mov	r1, r26
    1506:	aa 1b       	sub	r26, r26
    1508:	bb 1b       	sub	r27, r27
    150a:	fd 01       	movw	r30, r26
    150c:	0d c0       	rjmp	.+26     	; 0x1528 <__udivmodsi4_ep>

0000150e <__udivmodsi4_loop>:
    150e:	aa 1f       	adc	r26, r26
    1510:	bb 1f       	adc	r27, r27
    1512:	ee 1f       	adc	r30, r30
    1514:	ff 1f       	adc	r31, r31
    1516:	a2 17       	cp	r26, r18
    1518:	b3 07       	cpc	r27, r19
    151a:	e4 07       	cpc	r30, r20
    151c:	f5 07       	cpc	r31, r21
    151e:	20 f0       	brcs	.+8      	; 0x1528 <__udivmodsi4_ep>
    1520:	a2 1b       	sub	r26, r18
    1522:	b3 0b       	sbc	r27, r19
    1524:	e4 0b       	sbc	r30, r20
    1526:	f5 0b       	sbc	r31, r21

00001528 <__udivmodsi4_ep>:
    1528:	66 1f       	adc	r22, r22
    152a:	77 1f       	adc	r23, r23
    152c:	88 1f       	adc	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	1a 94       	dec	r1
    1532:	69 f7       	brne	.-38     	; 0x150e <__udivmodsi4_loop>
    1534:	60 95       	com	r22
    1536:	70 95       	com	r23
    1538:	80 95       	com	r24
    153a:	90 95       	com	r25
    153c:	9b 01       	movw	r18, r22
    153e:	ac 01       	movw	r20, r24
    1540:	bd 01       	movw	r22, r26
    1542:	cf 01       	movw	r24, r30
    1544:	08 95       	ret

00001546 <__umulhisi3>:
    1546:	a2 9f       	mul	r26, r18
    1548:	b0 01       	movw	r22, r0
    154a:	b3 9f       	mul	r27, r19
    154c:	c0 01       	movw	r24, r0
    154e:	a3 9f       	mul	r26, r19
    1550:	70 0d       	add	r23, r0
    1552:	81 1d       	adc	r24, r1
    1554:	11 24       	eor	r1, r1
    1556:	91 1d       	adc	r25, r1
    1558:	b2 9f       	mul	r27, r18
    155a:	70 0d       	add	r23, r0
    155c:	81 1d       	adc	r24, r1
    155e:	11 24       	eor	r1, r1
    1560:	91 1d       	adc	r25, r1
    1562:	08 95       	ret

00001564 <__adddi3_s8>:
    1564:	00 24       	eor	r0, r0
    1566:	a7 fd       	sbrc	r26, 7
    1568:	00 94       	com	r0
    156a:	2a 0f       	add	r18, r26
    156c:	30 1d       	adc	r19, r0
    156e:	40 1d       	adc	r20, r0
    1570:	50 1d       	adc	r21, r0
    1572:	60 1d       	adc	r22, r0
    1574:	70 1d       	adc	r23, r0
    1576:	80 1d       	adc	r24, r0
    1578:	90 1d       	adc	r25, r0
    157a:	08 95       	ret

0000157c <__cmpdi2>:
    157c:	2a 15       	cp	r18, r10
    157e:	3b 05       	cpc	r19, r11
    1580:	4c 05       	cpc	r20, r12
    1582:	5d 05       	cpc	r21, r13
    1584:	6e 05       	cpc	r22, r14
    1586:	7f 05       	cpc	r23, r15
    1588:	80 07       	cpc	r24, r16
    158a:	91 07       	cpc	r25, r17
    158c:	08 95       	ret

0000158e <__itoa_ncheck>:
    158e:	bb 27       	eor	r27, r27
    1590:	4a 30       	cpi	r20, 0x0A	; 10
    1592:	31 f4       	brne	.+12     	; 0x15a0 <__itoa_ncheck+0x12>
    1594:	99 23       	and	r25, r25
    1596:	22 f4       	brpl	.+8      	; 0x15a0 <__itoa_ncheck+0x12>
    1598:	bd e2       	ldi	r27, 0x2D	; 45
    159a:	90 95       	com	r25
    159c:	81 95       	neg	r24
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__utoa_common>

000015a4 <__utoa_ncheck>:
    15a4:	bb 27       	eor	r27, r27

000015a6 <__utoa_common>:
    15a6:	fb 01       	movw	r30, r22
    15a8:	55 27       	eor	r21, r21
    15aa:	aa 27       	eor	r26, r26
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	aa 1f       	adc	r26, r26
    15b2:	a4 17       	cp	r26, r20
    15b4:	10 f0       	brcs	.+4      	; 0x15ba <__utoa_common+0x14>
    15b6:	a4 1b       	sub	r26, r20
    15b8:	83 95       	inc	r24
    15ba:	50 51       	subi	r21, 0x10	; 16
    15bc:	b9 f7       	brne	.-18     	; 0x15ac <__utoa_common+0x6>
    15be:	a0 5d       	subi	r26, 0xD0	; 208
    15c0:	aa 33       	cpi	r26, 0x3A	; 58
    15c2:	08 f0       	brcs	.+2      	; 0x15c6 <__utoa_common+0x20>
    15c4:	a9 5d       	subi	r26, 0xD9	; 217
    15c6:	a1 93       	st	Z+, r26
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	79 f7       	brne	.-34     	; 0x15aa <__utoa_common+0x4>
    15cc:	b1 11       	cpse	r27, r1
    15ce:	b1 93       	st	Z+, r27
    15d0:	11 92       	st	Z+, r1
    15d2:	cb 01       	movw	r24, r22
    15d4:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <strrev>

000015d8 <strrev>:
    15d8:	dc 01       	movw	r26, r24
    15da:	fc 01       	movw	r30, r24
    15dc:	67 2f       	mov	r22, r23
    15de:	71 91       	ld	r23, Z+
    15e0:	77 23       	and	r23, r23
    15e2:	e1 f7       	brne	.-8      	; 0x15dc <strrev+0x4>
    15e4:	32 97       	sbiw	r30, 0x02	; 2
    15e6:	04 c0       	rjmp	.+8      	; 0x15f0 <strrev+0x18>
    15e8:	7c 91       	ld	r23, X
    15ea:	6d 93       	st	X+, r22
    15ec:	70 83       	st	Z, r23
    15ee:	62 91       	ld	r22, -Z
    15f0:	ae 17       	cp	r26, r30
    15f2:	bf 07       	cpc	r27, r31
    15f4:	c8 f3       	brcs	.-14     	; 0x15e8 <strrev+0x10>
    15f6:	08 95       	ret

000015f8 <_exit>:
    15f8:	f8 94       	cli

000015fa <__stop_program>:
    15fa:	ff cf       	rjmp	.-2      	; 0x15fa <__stop_program>
